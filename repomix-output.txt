This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.forceignore
.github/workflows/validate-salesforce.yml
.gitignore
.prettierignore
.prettierrc
config/project-scratch-def.json
force-app/main/default/aura/.eslintrc.json
force-app/main/default/classes/KanbanDataController.cls
force-app/main/default/classes/KanbanDataController.cls-meta.xml
force-app/main/default/classes/KanbanDataControllerTest.cls
force-app/main/default/classes/KanbanDataControllerTest.cls-meta.xml
force-app/main/default/classes/LeadTriggerHandler.cls
force-app/main/default/classes/LeadTriggerHandler.cls-meta.xml
force-app/main/default/classes/LeadTriggerHandlerTest.cls
force-app/main/default/classes/LeadTriggerHandlerTest.cls-meta.xml
force-app/main/default/lwc/.eslintrc.json
force-app/main/default/lwc/kanbanPerson/__tests__/kanbanPerson.test.js
force-app/main/default/lwc/kanbanPerson/handleCardClick.js
force-app/main/default/lwc/kanbanPerson/kanbanPerson.css
force-app/main/default/lwc/kanbanPerson/kanbanPerson.html
force-app/main/default/lwc/kanbanPerson/kanbanPerson.js
force-app/main/default/lwc/kanbanPerson/kanbanPerson.js-meta.xml
force-app/main/default/lwc/userDashboardList/__tests__/userDashboardList.test.js
force-app/main/default/lwc/userDashboardList/userDashboardList.css
force-app/main/default/lwc/userDashboardList/userDashboardList.html
force-app/main/default/lwc/userDashboardList/userDashboardList.js
force-app/main/default/lwc/userDashboardList/userDashboardList.js-meta.xml
force-app/main/default/triggers/LeadTrigger.trigger
force-app/main/default/triggers/LeadTrigger.trigger-meta.xml
force-app/test/jest-mocks/lightning/navigation.js
force-app/test/jest-mocks/lightning/platformShowToastEvent.js
jest.config.js
manifest-temp/package.xml
manifest/package-permissions.xml
manifest/package.xml
mydomain.html
package.json
Permissões de acesso - SalesForce.md
README.md
repomix-instruction.md
repomix.config.json
scripts/apex/hello.apex
scripts/soql/account.soql
scripts/soql/api-test.soql
sfdx-project.json

================================================================
Files
================================================================

================
File: force-app/main/default/lwc/kanbanPerson/handleCardClick.js
================
/**
 * Handles card click events in the Kanban component
 * @param {Object} event - The click event object
 * @return {void}
 */
export function handleCardClick(event) {
  const recordId = event.currentTarget.dataset.id;

  // If the click was on a control element (checkbox, button, link), don't select the card
  if (
    event.target.tagName === "BUTTON" ||
    event.target.tagName === "INPUT" ||
    event.target.tagName === "A" ||
    event.target.closest("lightning-icon") ||
    event.target.closest("lightning-input") ||
    event.target.closest("lightning-combobox")
  ) {
    return;
  }

  // Toggle selection for this record
  const selectedRecords = [...this.selectedRecords];
  const index = selectedRecords.indexOf(recordId);

  if (index === -1) {
    // Add to selection
    selectedRecords.push(recordId);
  } else {
    // Remove from selection
    selectedRecords.splice(index, 1);
  }

  this.selectedRecords = selectedRecords;
  this.updateRecordSelection();
}

================
File: Permissões de acesso - SalesForce.md
================
# Permissões - SalesForce

O objetivo desse arquivo é definir como quero que funcione os conjuntos de permissões e o grupo de permissão.
Primeiro vamos criar os conjuntos de permissões para ser reutilizados em outro grupo, mas focaremos no grupo dos SDR's

### Nome API das guias

area_comercial
area_gestor
back_office

### Nome API dos objetos

Account
Lead
Opportunity
Task

### Nome API das Páginas Lightning

PaginaGestor
AreaComercial

## Permissões SDR

Primeiro vamos começar definimos quais permissão cada úsuario do time de SDR terá.

O usuario que tem o grupo de SDR atribuido tem as seguintes permissões :

**Permissão de guias**
Permissão para acessar a guia com o nome de api **area_comercial**

**Permissão de objetos**

**Permissão para acessar objetos com esses nomes de API**

- Account
- Lead
- Opportunity
- Task

**Objeto Account**

- Visualizar somente cliente designados para o usuário dele
- Somente tem a permissão de Leitura dos dados do cliente designado

**Objeto Lead**

- Só consegue visualizar os leads que ele criou ou os leads atribuido a ele.
- CRUD para os Leads criados por ele
- Se outro usuario criou o lead e atribuiu a ele, ele não tem permissão para excluir (Somente Ler e Atualizar)

**Objeto Opportunity**

- Só consegue visualizar as oportunidades que ele criou ou as oportunidades atribuidas a ele.
- CRUD para as Oportunidades criadas por ele
- Se outro usuario criou a Oportunidade e atribuiu a ele, ele não tem permissão para excluir (Somente Ler e Atualizar)

================
File: .forceignore
================
# List files or directories below to ignore them when running force:source:push, force:source:pull, and force:source:status
# More information: https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_exclude_source.htm
#

package.xml

# LWC configuration files
**/jsconfig.json
**/.eslintrc.json

# LWC Jest
**/__tests__/**

================
File: .gitignore
================
# This file is used for Git repositories to specify intentionally untracked files that Git should ignore. 
# If you are not using git, you can delete this file. For more information see: https://git-scm.com/docs/gitignore
# For useful gitignore templates see: https://github.com/github/gitignore

# Salesforce cache
.sf/
.sfdx/
.localdevserver/
deploy-options.json

# LWC VSCode autocomplete
**/lwc/jsconfig.json

# LWC Jest coverage reports
coverage/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/

# Eslint cache
.eslintcache

# MacOS system files
.DS_Store

# Windows system files
Thumbs.db
ehthumbs.db
[Dd]esktop.ini
$RECYCLE.BIN/

# Local environment variables
.env

# Python Salesforce Functions
**/__pycache__/
**/.venv/
**/venv/

================
File: .prettierignore
================
# List files or directories below to ignore them when running prettier
# More information: https://prettier.io/docs/en/ignore.html
#

**/staticresources/**
.localdevserver
.sfdx
.sf
.vscode

coverage/

================
File: .prettierrc
================
{
  "trailingComma": "none",
  "plugins": [
    "prettier-plugin-apex",
    "@prettier/plugin-xml"
  ],
  "overrides": [
    {
      "files": "**/lwc/**/*.html",
      "options": { "parser": "lwc" }
    },
    {
      "files": "*.{cmp,page,component}",
      "options": { "parser": "html" }
    }
  ]
}

================
File: force-app/main/default/aura/.eslintrc.json
================
{
  "plugins": ["@salesforce/eslint-plugin-aura"],
  "extends": ["plugin:@salesforce/eslint-plugin-aura/recommended"],
  "rules": {
    "vars-on-top": "off",
    "no-unused-expressions": "off"
  }
}

================
File: force-app/main/default/classes/KanbanDataController.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/classes/KanbanDataControllerTest.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/classes/LeadTriggerHandler.cls
================
public class LeadTriggerHandler {
  public static void handleBeforeDelete(List<Lead> oldLeads) {
    if (Trigger.isDelete) {
      Map<Id, Lead> leadsWithCreator = new Map<Id, Lead>(
        [
          SELECT Id, CreatedById, IsConverted
          FROM Lead
          WHERE Id IN :oldLeads
        ]
      );

      for (Lead lead : oldLeads) {
        Lead leadWithCreator = leadsWithCreator.get(lead.Id);
        if (leadWithCreator.CreatedById != UserInfo.getUserId()) {
          lead.addError(
            'Você só pode excluir Leads que foram criados por você.'
          );
        }
        if (leadWithCreator.IsConverted) {
          lead.addError('Lead já convertido não pode ser excluído.');
        }
      }
    }
  }

  public static void handleBeforeInsert(List<Lead> newLeads) {
    for (Lead lead : newLeads) {
      validateEmailFormat(lead);
      validatePhoneFormat(lead);
    }
  }

  public static void handleBeforeUpdate(
    List<Lead> newLeads,
    Map<Id, Lead> oldLeadsMap
  ) {
    for (Lead lead : newLeads) {
      Lead oldLead = oldLeadsMap.get(lead.Id);
      validateEmailFormat(lead);
      validatePhoneFormat(lead);

      if (
        oldLead.Status != lead.Status &&
        lead.Status == 'Fechado' &&
        String.isBlank(lead.Rating)
      ) {
        lead.addError('Rating é obrigatório para Leads com status Fechado.');
      }
    }
  }

  private static void validateEmailFormat(Lead lead) {
    if (String.isNotBlank(lead.Email) && !lead.Email.contains('@')) {
      lead.Email.addError('Email inválido. Deve conter @.');
    }
  }

  private static void validatePhoneFormat(Lead lead) {
    if (String.isNotBlank(lead.Phone) && !lead.Phone.isNumeric()) {
      lead.Phone.addError('Telefone deve conter apenas números.');
    }
  }
}

================
File: force-app/main/default/classes/LeadTriggerHandler.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/classes/LeadTriggerHandlerTest.cls
================
@isTest
private class LeadTriggerHandlerTest {
  @TestSetup
  static void makeData() {
    Profile p = [
      SELECT Id
      FROM Profile
      WHERE Name = 'Minimum Access - API Only Integrations'
    ];

    User u1 = new User(
      Username = 'test.user1@reinocapital.com.test',
      LastName = 'Testing1',
      FirstName = 'Test1',
      Email = 'test.user1@reinocapital.com.test',
      Alias = 'test1',
      TimeZoneSidKey = 'America/Sao_Paulo',
      LocaleSidKey = 'pt_BR',
      EmailEncodingKey = 'UTF-8',
      LanguageLocaleKey = 'pt_BR',
      ProfileId = p.Id
    );

    User u2 = new User(
      Username = 'test.user2@reinocapital.com.test',
      LastName = 'Testing2',
      FirstName = 'Test2',
      Email = 'test.user2@reinocapital.com.test',
      Alias = 'test2',
      TimeZoneSidKey = 'America/Sao_Paulo',
      LocaleSidKey = 'pt_BR',
      EmailEncodingKey = 'UTF-8',
      LanguageLocaleKey = 'pt_BR',
      ProfileId = p.Id
    );

    insert new List<User>{ u1, u2 };
  }

  @isTest
  static void testCannotDeleteOthersLead() {
    List<User> users = [
      SELECT Id
      FROM User
      WHERE Email LIKE 'test.user%@reinocapital.com.test'
      ORDER BY Email
    ];
    User u1 = users[0];
    User u2 = users[1];

    System.runAs(u1) {
      Lead l = new Lead(LastName = 'Teste', Company = 'Empresa');
      insert l;

      System.runAs(u2) {
        Test.startTest();
        try {
          delete l;
          System.assert(
            false,
            'Deveria ter falhado ao deletar lead de outro usuário'
          );
        } catch (DmlException e) {
          String msg = e.getDmlMessage(0);
          System.assert(
            msg.contains(
              'Você só pode excluir Leads que foram criados por você.'
            ) || msg.contains('insufficient access rights'),
            'Mensagem de erro incorreta: ' + msg
          );
        }
        Test.stopTest();
      }
    }
  }

  @isTest
  static void testCanDeleteOwnLead() {
    User u = [
      SELECT Id
      FROM User
      WHERE Email LIKE 'test.user1@reinocapital.com.test'
      LIMIT 1
    ];

    System.runAs(u) {
      Lead l = new Lead(LastName = 'Meu Lead', Company = 'Empresa');
      insert l;

      Test.startTest();
      delete l;
      Test.stopTest();

      List<Lead> deletedLead = [SELECT Id FROM Lead WHERE Id = :l.Id];
      System.assertEquals(
        0,
        deletedLead.size(),
        'O lead deveria ter sido excluído com sucesso'
      );
    }
  }

  @IsTest
  static void testCannotDeleteConvertedLead() {
    User u = [
      SELECT Id
      FROM User
      WHERE Email LIKE 'test.user1@reinocapital.com.test'
      LIMIT 1
    ];

    System.runAs(u) {
      // Criar conta e contato necessários para conversão
      Account acc = new Account(Name = 'Teste Account');
      insert acc;

      Contact con = new Contact(LastName = 'Teste Contact', AccountId = acc.Id);
      insert con;

      // Consulta os valores válidos para o status de conversão
      LeadStatus convertStatus = [
        SELECT Id, MasterLabel
        FROM LeadStatus
        WHERE IsConverted = TRUE
        LIMIT 1
      ];

      Lead l = new Lead(
        LastName = 'Teste',
        Company = 'Empresa',
        Status = 'Qualificado' // Use um status válido que permita conversão
      );
      insert l;

      Database.LeadConvert lc = new Database.LeadConvert();
      lc.setLeadId(l.Id);
      lc.setAccountId(acc.Id);
      lc.setContactId(con.Id);
      lc.setConvertedStatus(convertStatus.MasterLabel); // Use um status válido de conversão

      Test.startTest();
      Database.LeadConvertResult lcr = Database.convertLead(lc);
      System.assert(
        lcr.isSuccess(),
        'A conversão do Lead deveria ter sido bem sucedida'
      );

      try {
        delete l;
        System.assert(
          false,
          'Deveria ter falhado ao tentar excluir lead convertido'
        );
      } catch (DmlException e) {
        System.assert(
          e.getMessage().contains('Lead já convertido não pode ser excluído.'),
          'Mensagem de erro esperada'
        );
      }
      Test.stopTest();
    }
  }

  @isTest
  static void testInvalidEmailFormat() {
    Lead l = new Lead(
      LastName = 'Teste',
      Company = 'Empresa',
      Email = 'emailinvalido'
    );

    Test.startTest();
    try {
      insert l;
      System.assert(false, 'Deveria ter falhado com email inválido');
    } catch (DmlException e) {
      System.assertEquals(
        'Email: endereço de email inválido: emailinvalido',
        e.getDmlMessage(0),
        'Mensagem de erro incorreta'
      );
    }
    Test.stopTest();
  }

  @isTest
  static void testInvalidPhoneFormat() {
    Lead l = new Lead(
      LastName = 'Teste',
      Company = 'Empresa',
      Phone = 'abc123'
    );

    Test.startTest();
    try {
      insert l;
      System.assert(false, 'Deveria ter falhado com telefone inválido');
    } catch (DmlException e) {
      System.assert(
        e.getMessage().contains('apenas números'),
        'Mensagem de erro esperada'
      );
    }
    Test.stopTest();
  }

  @isTest
  static void testRequiredRatingOnClosedStatus() {
    Lead l = new Lead(LastName = 'Teste', Company = 'Empresa');
    insert l;

    l.Status = 'Fechado';

    Test.startTest();
    try {
      update l;
      System.assert(false, 'Deveria ter falhado sem Rating');
    } catch (DmlException e) {
      System.assert(
        e.getMessage().contains('Rating é obrigatório'),
        'Mensagem de erro esperada'
      );
    }
    Test.stopTest();
  }

  @isTest
  static void testValidLeadUpdate() {
    Lead l = new Lead(
      LastName = 'Teste',
      Company = 'Empresa',
      Email = 'teste@email.com',
      Phone = '123456789'
    );
    insert l;

    l.Status = 'Fechado';
    l.Rating = 'Hot';

    Test.startTest();
    update l;
    Test.stopTest();

    Lead updatedLead = [SELECT Status, Rating FROM Lead WHERE Id = :l.Id];
    System.assertEquals('Fechado', updatedLead.Status);
    System.assertEquals('Hot', updatedLead.Rating);
  }
}

================
File: force-app/main/default/classes/LeadTriggerHandlerTest.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/lwc/.eslintrc.json
================
{
  "extends": ["@salesforce/eslint-config-lwc/recommended"],
  "overrides": [
    {
      "files": ["*.test.js"],
      "rules": {
        "@lwc/lwc/no-unexpected-wire-adapter-usages": "off"
      },
      "env": {
        "node": true
      }
    }
  ]
}

================
File: force-app/main/default/lwc/userDashboardList/__tests__/userDashboardList.test.js
================
import { createElement } from "lwc";
import UserDashboardList from "c/userDashboardList";

describe("c-user-dashboard-list", () => {
  let element;

  beforeEach(() => {
    element = createElement("c-user-dashboard-list", {
      is: UserDashboardList
    });
    document.body.appendChild(element);
  });

  afterEach(() => {
    document.body.removeChild(element);
  });

  it("should initialize with isExpanded as false", () => {
    expect(element.isExpanded).toBeFalsy();
  });

  it("should toggle expandable content when button is clicked", () => {
    // Get initial state
    const expandableContent =
      element.shadowRoot.querySelector(".slds-is-relative");
    expect(expandableContent.classList.contains("slds-hide")).toBeTruthy();
    expect(expandableContent.classList.contains("slds-show")).toBeFalsy();

    // Find and click the expand button
    const expandButton = element.shadowRoot.querySelector("button");
    expandButton.click();

    // Return a promise to wait for any asynchronous DOM updates
    return Promise.resolve().then(() => {
      // Check if content is now expanded
      const updatedContent =
        element.shadowRoot.querySelector(".slds-is-relative");
      expect(updatedContent.classList.contains("slds-show")).toBeTruthy();
      expect(updatedContent.classList.contains("slds-hide")).toBeFalsy();

      // Check if icon rotation class is applied
      const icon = element.shadowRoot.querySelector("lightning-icon");
      expect(icon.classList.contains("rotate-icon")).toBeTruthy();
    });
  });

  it("should render all static elements correctly", () => {
    // Verify main card elements
    const cardHeader = element.shadowRoot.querySelector(".slds-card__header");
    expect(cardHeader).not.toBeNull();
    expect(cardHeader.textContent).toContain("Team Dashboard");

    // Verify stats boxes
    const statBoxes = element.shadowRoot.querySelectorAll(".stat-box");
    expect(statBoxes.length).toBe(2);

    // Verify secondary stats
    const secondaryStats =
      element.shadowRoot.querySelectorAll(".secondary-stat");
    expect(secondaryStats.length).toBeGreaterThan(0);

    // Verify expand button exists
    const expandButton = element.shadowRoot.querySelector("button");
    expect(expandButton).not.toBeNull();
    expect(expandButton.textContent).toContain("Ver todas oportunidades");
  });

  it("should toggle icon rotation class when expanded", () => {
    // Get the icon element
    const icon = element.shadowRoot.querySelector(
      'lightning-icon[icon-name="utility:chevrondown"]'
    );
    expect(icon.classList.contains("rotate-icon")).toBeFalsy();

    // Click the expand button
    const expandButton = element.shadowRoot.querySelector("button");
    expandButton.click();

    return Promise.resolve()
      .then(() => {
        expect(icon.classList.contains("rotate-icon")).toBeTruthy();

        // Click again to collapse
        expandButton.click();
        return Promise.resolve();
      })
      .then(() => {
        expect(icon.classList.contains("rotate-icon")).toBeFalsy();
      });
  });
});

================
File: force-app/main/default/lwc/userDashboardList/userDashboardList.css
================
.user-card {
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  transition:
    transform 0.2s,
    box-shadow 0.2s;
}

.user-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.user-avatar {
  overflow: hidden;
  border: 2px solid #f3f3f3;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.stat-box {
  background-color: #f7f9fb;
  border-radius: 6px;
  padding: 8px;
  transition: background-color 0.2s;
}

.stat-box:hover {
  background-color: #eef1f6;
}

.secondary-stat {
  padding: 6px 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.secondary-stat:hover {
  background-color: #f7f9fb;
}

.badge-highlight {
  background-color: #0176d3;
  color: white;
}

.badge-neutral {
  background-color: #747474;
  color: white;
}

.badge-success {
  background-color: #2e844a;
  color: white;
}

.expand-button {
  border-radius: 4px;
  transition: background-color 0.2s;
}

.rotate-icon {
  transform: rotate(180deg);
  transition: transform 0.2s;
}

.card-title {
  font-weight: 600;
  color: #032d60;
}

.card-role {
  color: #5a5a5a;
}

.animate-expand {
  transition: max-height 0.3s ease-in-out;
  overflow: hidden;
}

================
File: force-app/main/default/lwc/userDashboardList/userDashboardList.html
================
<!-- User Dashboard List Component -->
<template>
  <div class="slds-card">
    <!-- Top Section -->
    <div class="slds-card__body">
      <div class="slds-grid slds-wrap slds-gutters">
        <!-- User Card Template -->
        <div
          class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-5 slds-p-around_x-small"
        >
          <article class="slds-card user-card">
            <div class="slds-card__header">
              <div class="slds-media slds-media_center">
                <div class="slds-media__figure">
                  <span class="slds-avatar slds-avatar_large user-avatar">
                    <img
                      src="/images/Portrait_Placeholder.png"
                      alt="User Photo"
                    />
                  </span>
                </div>
                <div class="slds-media__body">
                  <h2 class="slds-text-heading_small card-title">
                    Carlus Tintori
                  </h2>
                  <p class="slds-text-body_small card-role">
                    Head de Operações
                  </p>
                </div>
              </div>
            </div>

            <div class="slds-card__body">
              <!-- Opportunity Stats Section -->
              <div class="slds-p-around_medium">
                <h3 class="slds-text-title slds-m-bottom_medium">
                  Operações abertas
                </h3>

                <!-- Main Stats -->
                <div class="slds-grid slds-gutters slds-m-bottom_medium">
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:opportunity"
                          size="small"
                          variant="warning"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Em Negociação</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">4</span>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:success"
                          size="small"
                          variant="success"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Convertido</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">2</span>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>

                <!-- Secondary Stats -->
                <div class="slds-grid slds-gutters slds-grid_vertical">
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:multi_picklist"
                          size="x-small"
                          variant="warning"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Sem contato</h3>
                          <div>
                            <span class="slds-badge badge-neutral">8</span>
                          </div>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:filter"
                          size="x-small"
                          variant="info"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Primeiro Contato</h3>
                          <div>
                            <span class="slds-badge badge-highlight">3</span>
                          </div>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>
                <!-- Expandable Section -->
                <div class="slds-m-top_medium">
                  <button
                    class="slds-button slds-button_neutral slds-button_stretch expand-button"
                    onclick={toggleExpand}
                    data-index="0"
                    aria-expanded={isCard0Expanded}
                  >
                    <span class="slds-truncate">Ver todas oportunidades</span>
                    <lightning-icon
                      icon-name="utility:chevrondown"
                      size="xx-small"
                      class={dropdownIconClass0}
                    >
                    </lightning-icon>
                  </button>

                  <div class={expandableContentClass0}>
                    <div class="slds-grid slds-grid_vertical slds-p-top_medium">
                      <!-- Additional Stats -->
                      <div class="slds-col slds-size_1-of-1">
                        <article class="slds-tile slds-media secondary-stat">
                          <div class="slds-media__figure">
                            <lightning-icon
                              icon-name="utility:file"
                              size="x-small"
                            ></lightning-icon>
                          </div>
                          <div class="slds-media__body">
                            <div class="slds-grid slds-grid_align-spread">
                              <h3 class="slds-truncate">Primeira Reunião</h3>
                              <div>
                                <span class="slds-badge">100</span>
                              </div>
                            </div>
                          </div>
                        </article>
                      </div>
                      <!-- Add more stats here... -->
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>
        <!-- End User Card Template -->

        <!-- Repeat of User Card Template with different data -->
        <div
          class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-5 slds-p-around_x-small"
        >
          <article class="slds-card">
            <div class="slds-card__header">
              <div class="slds-media slds-media_center">
                <div class="slds-media__figure">
                  <span class="slds-avatar slds-avatar_large">
                    <img
                      src="/images/Portrait_Placeholder.png"
                      alt="User Photo"
                    />
                  </span>
                </div>
                <div class="slds-media__body">
                  <h2 class="slds-text-heading_small">Maria Silva</h2>
                  <p class="slds-text-body_small">Gerente Comercial</p>
                </div>
              </div>
            </div>
            <div class="slds-card__body">
              <div class="slds-p-around_medium">
                <h3 class="slds-text-title slds-m-bottom_medium">
                  Operações abertas
                </h3>
                <div class="slds-grid slds-gutters slds-m-bottom_medium">
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Em Negociação</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">6</span>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Convertido</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">3</span>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>
                <!-- Secondary Stats -->
                <div class="slds-grid slds-gutters slds-grid_vertical">
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:multi_picklist"
                          size="x-small"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Sem contato</h3>
                          <div><span class="slds-badge">5</span></div>
                        </div>
                      </div>
                    </article>
                  </div>
                  <!-- Expandable Section -->
                  <div class="slds-m-top_medium">
                    <button
                      class="slds-button slds-button_neutral slds-button_stretch expand-button"
                      onclick={toggleExpand}
                      data-index="1"
                      aria-expanded={isCard1Expanded}
                    >
                      <span class="slds-truncate">Ver todas oportunidades</span>
                      <lightning-icon
                        icon-name="utility:chevrondown"
                        size="xx-small"
                        class={dropdownIconClass1}
                      >
                      </lightning-icon>
                    </button>

                    <div class={expandableContentClass1}>
                      <div
                        class="slds-grid slds-grid_vertical slds-p-top_medium"
                      >
                        <!-- Additional Stats -->
                        <div class="slds-col slds-size_1-of-1">
                          <article class="slds-tile slds-media secondary-stat">
                            <div class="slds-media__figure">
                              <lightning-icon
                                icon-name="utility:file"
                                size="x-small"
                              ></lightning-icon>
                            </div>
                            <div class="slds-media__body">
                              <div class="slds-grid slds-grid_align-spread">
                                <h3 class="slds-truncate">Primeira Reunião</h3>
                                <div>
                                  <span class="slds-badge">2</span>
                                </div>
                              </div>
                            </div>
                          </article>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>

        <!-- User Card 3 -->
        <div
          class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-5 slds-p-around_x-small"
        >
          <article class="slds-card">
            <div class="slds-card__header">
              <div class="slds-media slds-media_center">
                <div class="slds-media__figure">
                  <span class="slds-avatar slds-avatar_large">
                    <img
                      src="/images/Portrait_Placeholder.png"
                      alt="User Photo"
                    />
                  </span>
                </div>
                <div class="slds-media__body">
                  <h2 class="slds-text-heading_small">João Santos</h2>
                  <p class="slds-text-body_small">Analista de Vendas</p>
                </div>
              </div>
            </div>
            <div class="slds-card__body">
              <div class="slds-p-around_medium">
                <h3 class="slds-text-title slds-m-bottom_medium">
                  Operações abertas
                </h3>
                <div class="slds-grid slds-gutters slds-m-bottom_medium">
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Em Negociação</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">8</span>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Convertido</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">4</span>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>
                <!-- Secondary Stats -->
                <div class="slds-grid slds-gutters slds-grid_vertical">
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:multi_picklist"
                          size="x-small"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Sem contato</h3>
                          <div><span class="slds-badge">7</span></div>
                        </div>
                      </div>
                    </article>
                  </div>
                  <!-- Expandable Section -->
                  <div class="slds-m-top_medium">
                    <button
                      class="slds-button slds-button_neutral slds-button_stretch expand-button"
                      onclick={toggleExpand}
                      data-index="2"
                      aria-expanded={isCard2Expanded}
                    >
                      <span class="slds-truncate">Ver todas oportunidades</span>
                      <lightning-icon
                        icon-name="utility:chevrondown"
                        size="xx-small"
                        class={dropdownIconClass2}
                      >
                      </lightning-icon>
                    </button>

                    <div class={expandableContentClass2}>
                      <div
                        class="slds-grid slds-grid_vertical slds-p-top_medium"
                      >
                        <!-- Additional Stats -->
                        <div class="slds-col slds-size_1-of-1">
                          <article class="slds-tile slds-media secondary-stat">
                            <div class="slds-media__figure">
                              <lightning-icon
                                icon-name="utility:file"
                                size="x-small"
                              ></lightning-icon>
                            </div>
                            <div class="slds-media__body">
                              <div class="slds-grid slds-grid_align-spread">
                                <h3 class="slds-truncate">Primeira Reunião</h3>
                                <div>
                                  <span class="slds-badge">3</span>
                                </div>
                              </div>
                            </div>
                          </article>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>

        <!-- User Card 4 -->
        <div
          class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-5 slds-p-around_x-small"
        >
          <article class="slds-card">
            <div class="slds-card__header">
              <div class="slds-media slds-media_center">
                <div class="slds-media__figure">
                  <span class="slds-avatar slds-avatar_large">
                    <img
                      src="/images/Portrait_Placeholder.png"
                      alt="User Photo"
                    />
                  </span>
                </div>
                <div class="slds-media__body">
                  <h2 class="slds-text-heading_small">Ana Oliveira</h2>
                  <p class="slds-text-body_small">Consultora Senior</p>
                </div>
              </div>
            </div>
            <div class="slds-card__body">
              <div class="slds-p-around_medium">
                <h3 class="slds-text-title slds-m-bottom_medium">
                  Operações abertas
                </h3>
                <div class="slds-grid slds-gutters slds-m-bottom_medium">
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Em Negociação</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">5</span>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Convertido</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">6</span>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>
                <!-- Secondary Stats -->
                <div class="slds-grid slds-gutters slds-grid_vertical">
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:multi_picklist"
                          size="x-small"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Sem contato</h3>
                          <div><span class="slds-badge">4</span></div>
                        </div>
                      </div>
                    </article>
                  </div>
                  <!-- Expandable Section -->
                  <div class="slds-m-top_medium">
                    <button
                      class="slds-button slds-button_neutral slds-button_stretch expand-button"
                      onclick={toggleExpand}
                      data-index="3"
                      aria-expanded={isCard3Expanded}
                    >
                      <span class="slds-truncate">Ver todas oportunidades</span>
                      <lightning-icon
                        icon-name="utility:chevrondown"
                        size="xx-small"
                        class={dropdownIconClass3}
                      >
                      </lightning-icon>
                    </button>

                    <div class={expandableContentClass3}>
                      <div
                        class="slds-grid slds-grid_vertical slds-p-top_medium"
                      >
                        <!-- Additional Stats -->
                        <div class="slds-col slds-size_1-of-1">
                          <article class="slds-tile slds-media secondary-stat">
                            <div class="slds-media__figure">
                              <lightning-icon
                                icon-name="utility:file"
                                size="x-small"
                              ></lightning-icon>
                            </div>
                            <div class="slds-media__body">
                              <div class="slds-grid slds-grid_align-spread">
                                <h3 class="slds-truncate">Primeira Reunião</h3>
                                <div>
                                  <span class="slds-badge">5</span>
                                </div>
                              </div>
                            </div>
                          </article>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>

        <!-- User Card 5 -->
        <div
          class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-5 slds-p-around_x-small"
        >
          <article class="slds-card">
            <div class="slds-card__header">
              <div class="slds-media slds-media_center">
                <div class="slds-media__figure">
                  <span class="slds-avatar slds-avatar_large">
                    <img
                      src="/images/Portrait_Placeholder.png"
                      alt="User Photo"
                    />
                  </span>
                </div>
                <div class="slds-media__body">
                  <h2 class="slds-text-heading_small">Pedro Costa</h2>
                  <p class="slds-text-body_small">Especialista de Vendas</p>
                </div>
              </div>
            </div>
            <div class="slds-card__body">
              <div class="slds-p-around_medium">
                <h3 class="slds-text-title slds-m-bottom_medium">
                  Operações abertas
                </h3>
                <div class="slds-grid slds-gutters slds-m-bottom_medium">
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Em Negociação</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">7</span>
                        </div>
                      </div>
                    </article>
                  </div>
                  <div class="slds-col">
                    <article class="slds-tile slds-media stat-box">
                      <div class="slds-media__body">
                        <h3 class="slds-tile__title">Convertido</h3>
                        <div class="slds-tile__detail">
                          <span class="slds-text-heading_medium">5</span>
                        </div>
                      </div>
                    </article>
                  </div>
                </div>
                <!-- Secondary Stats -->
                <div class="slds-grid slds-gutters slds-grid_vertical">
                  <div class="slds-col slds-size_1-of-1">
                    <article class="slds-tile slds-media secondary-stat">
                      <div class="slds-media__figure">
                        <lightning-icon
                          icon-name="utility:multi_picklist"
                          size="x-small"
                        ></lightning-icon>
                      </div>
                      <div class="slds-media__body">
                        <div class="slds-grid slds-grid_align-spread">
                          <h3 class="slds-truncate">Sem contato</h3>
                          <div><span class="slds-badge">6</span></div>
                        </div>
                      </div>
                    </article>
                  </div>
                  <!-- Expandable Section -->
                  <div class="slds-m-top_medium">
                    <button
                      class="slds-button slds-button_neutral slds-button_stretch expand-button"
                      onclick={toggleExpand}
                      data-index="4"
                      aria-expanded={isCard4Expanded}
                    >
                      <span class="slds-truncate">Ver todas oportunidades</span>
                      <lightning-icon
                        icon-name="utility:chevrondown"
                        size="xx-small"
                        class={dropdownIconClass4}
                      >
                      </lightning-icon>
                    </button>

                    <div class={expandableContentClass4}>
                      <div
                        class="slds-grid slds-grid_vertical slds-p-top_medium"
                      >
                        <!-- Additional Stats -->
                        <div class="slds-col slds-size_1-of-1">
                          <article class="slds-tile slds-media secondary-stat">
                            <div class="slds-media__figure">
                              <lightning-icon
                                icon-name="utility:file"
                                size="x-small"
                              ></lightning-icon>
                            </div>
                            <div class="slds-media__body">
                              <div class="slds-grid slds-grid_align-spread">
                                <h3 class="slds-truncate">Primeira Reunião</h3>
                                <div>
                                  <span class="slds-badge">4</span>
                                </div>
                              </div>
                            </div>
                          </article>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>
      </div>
    </div>
  </div>
</template>

================
File: force-app/main/default/lwc/userDashboardList/userDashboardList.js
================
import { LightningElement, track } from "lwc";

export default class UserDashboardList extends LightningElement {
  @track expandedStates = [false, false, false, false, false];

  // Getters para o estado de cada card
  get isCard0Expanded() {
    return this.expandedStates[0];
  }
  get isCard1Expanded() {
    return this.expandedStates[1];
  }
  get isCard2Expanded() {
    return this.expandedStates[2];
  }
  get isCard3Expanded() {
    return this.expandedStates[3];
  }
  get isCard4Expanded() {
    return this.expandedStates[4];
  }

  // Getters para classes CSS do conteúdo expansível de cada card
  get expandableContentClass0() {
    return `slds-is-relative ${this.expandedStates[0] ? "slds-show" : "slds-hide"}`;
  }
  get expandableContentClass1() {
    return `slds-is-relative ${this.expandedStates[1] ? "slds-show" : "slds-hide"}`;
  }
  get expandableContentClass2() {
    return `slds-is-relative ${this.expandedStates[2] ? "slds-show" : "slds-hide"}`;
  }
  get expandableContentClass3() {
    return `slds-is-relative ${this.expandedStates[3] ? "slds-show" : "slds-hide"}`;
  }
  get expandableContentClass4() {
    return `slds-is-relative ${this.expandedStates[4] ? "slds-show" : "slds-hide"}`;
  }

  // Getters para classes CSS do ícone de dropdown de cada card
  get dropdownIconClass0() {
    return `slds-button__icon slds-button__icon_right ${this.expandedStates[0] ? "rotate-icon" : ""}`;
  }
  get dropdownIconClass1() {
    return `slds-button__icon slds-button__icon_right ${this.expandedStates[1] ? "rotate-icon" : ""}`;
  }
  get dropdownIconClass2() {
    return `slds-button__icon slds-button__icon_right ${this.expandedStates[2] ? "rotate-icon" : ""}`;
  }
  get dropdownIconClass3() {
    return `slds-button__icon slds-button__icon_right ${this.expandedStates[3] ? "rotate-icon" : ""}`;
  }
  get dropdownIconClass4() {
    return `slds-button__icon slds-button__icon_right ${this.expandedStates[4] ? "rotate-icon" : ""}`;
  }

  // Toggle expand/collapse
  toggleExpand(event) {
    const cardIndex = parseInt(event.currentTarget.dataset.index, 10);
    this.expandedStates = [...this.expandedStates];
    this.expandedStates[cardIndex] = !this.expandedStates[cardIndex];
  }
}

================
File: force-app/main/default/lwc/userDashboardList/userDashboardList.js-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <isExposed>true</isExposed>
    <masterLabel>User Dashboard List</masterLabel>
    <description
  >Component to display user dashboard with opportunity statistics</description>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
        <target>lightning__RecordPage</target>
    </targets>
</LightningComponentBundle>

================
File: force-app/main/default/triggers/LeadTrigger.trigger
================
trigger LeadTrigger on Lead(before insert, before update, before delete) {
  if (Trigger.isBefore) {
    if (Trigger.isDelete) {
      LeadTriggerHandler.handleBeforeDelete(Trigger.old);
    } else if (Trigger.isInsert) {
      LeadTriggerHandler.handleBeforeInsert(Trigger.new);
    } else if (Trigger.isUpdate) {
      LeadTriggerHandler.handleBeforeUpdate(Trigger.new, Trigger.oldMap);
    }
  }
}

================
File: force-app/main/default/triggers/LeadTrigger.trigger-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/test/jest-mocks/lightning/navigation.js
================
export const NavigationMixin = (Base) => {
  return class extends Base {
    navigate(pageReference) {
      return Promise.resolve(true);
    }
  };
};

NavigationMixin.Navigate = Symbol("Navigate");

================
File: force-app/test/jest-mocks/lightning/platformShowToastEvent.js
================
export class ShowToastEvent {
  constructor(params) {
    this.title = params.title;
    this.message = params.message;
    this.variant = params.variant;
  }
}

================
File: manifest-temp/package.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>LeadTriggerHandler</members>
        <members>LeadTriggerHandlerTest</members>
        <name>ApexClass</name>
    </types>
    <types>
        <members>LeadTrigger</members>
        <name>ApexTrigger</name>
    </types>
    <version>58.0</version>
</Package>

================
File: manifest/package-permissions.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>SDR_Base_Permissions</members>
        <members>SDR_Tab_Permissions</members>
        <name>PermissionSet</name>
    </types>
    <types>
        <members>SDR_Group</members>
        <name>PermissionSetGroup</name>
    </types>
    <types>
        <members>Lead.PreventDeletionByOthers</members>
        <members>Opportunity.PreventDeletionByOthers</members>
        <name>ValidationRule</name>
    </types>
    <types>
        <members>Lead</members>
        <members>Opportunity</members>
        <name>SharingRules</name>
    </types>
    <version>57.0</version>
</Package>

================
File: repomix-instruction.md
================
# Coding Guidelines

- Follow the Airbnb JavaScript Style Guide
- Suggest splitting files into smaller, focused units when appropriate
- Add comments for non-obvious logic. Keep all text in Portuguese
- All new features should have corresponding unit tests

# Generate Comprehensive Output

- Include all content without abbreviation, unless specified otherwise
- Optimize for handling large codebases while maintaining output quality

================
File: repomix.config.json
================
{
  "output": {
    "instructionFilePath": "repomix-instruction.md"
  }
}

================
File: scripts/apex/hello.apex
================
// Use .apex files to store anonymous Apex.
// You can execute anonymous Apex in VS Code by selecting the
//     apex text and running the command:
//     SFDX: Execute Anonymous Apex with Currently Selected Text
// You can also execute the entire file by running the command:
//     SFDX: Execute Anonymous Apex with Editor Contents

string tempvar = 'Enter_your_name_here';
System.debug('Hello World!');
System.debug('My name is ' + tempvar);

================
File: scripts/soql/account.soql
================
// Use .soql files to store SOQL queries.
// You can execute queries in VS Code by selecting the
//     query text and running the command:
//     SFDX: Execute SOQL Query with Currently Selected Text

SELECT Id, Name FROM Account

================
File: scripts/soql/api-test.soql
================
SELECT Id, Profile.PermissionsApiOnlyUser FROM User

================
File: sfdx-project.json
================
{
  "packageDirectories": [
    {
      "path": "force-app",
      "default": true
    }
  ],
  "name": "dx-project",
  "namespace": "",
  "sfdcLoginUrl": "https://login.salesforce.com",
  "sourceApiVersion": "62.0"
}

================
File: .github/workflows/validate-salesforce.yml
================
name: Salesforce Validation Check

on:
  pull_request:
    branches:
      - sandbox
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Salesforce CLI
        run: npm install --global sfdx-cli

      - name: Authenticate Salesforce (Sandbox)
        run: echo "${{ secrets.SF_SANDBOX_AUTH_URL }}" | sf auth sfdx-url store --alias sandReino --set-default

      - name: Validate Deployment
        run: sf project deploy validate --target-org sandReino --wait 10

================
File: config/project-scratch-def.json
================
{
  "orgName": "codebuilder company",
  "edition": "Developer",
  "features": ["EnableSetPasswordInApi"],
  "settings": {
    "lightningExperienceSettings": {
      "enableS1DesktopEnabled": true,
      "enableLightningPreviewPref": true
    },
    "mobileSettings": {
      "enableS1EncryptedStoragePref2": false
    }
  }
}

================
File: mydomain.html
================
<!doctype html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reino Capital</title>
    <style>
      body {
        background-color: white;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
      }
    </style>
  </head>
  <body>
    <header class="content-top"></header>
    <main class="content"></main>
  </body>
</html>

================
File: force-app/main/default/classes/KanbanDataControllerTest.cls
================
@isTest
private class KanbanDataControllerTest {
  @TestSetup
  static void makeData() {
    Account testAccount = new Account(Name = 'Conta Teste');
    insert testAccount;

    List<Opportunity> testOpps = new List<Opportunity>();
    testOpps.add(
      new Opportunity(
        Name = 'Oportunidade Teste 1',
        AccountId = testAccount.Id,
        StageName = 'Sem contato',
        CloseDate = Date.today().addDays(30),
        Amount = 10000,
        Probabilidade_da_Oportunidade__c = '89%'
      )
    );
    testOpps.add(
      new Opportunity(
        Name = 'Oportunidade Teste 2',
        AccountId = testAccount.Id,
        StageName = 'Em Negociação',
        CloseDate = Date.today().addDays(30),
        Amount = 20000,
        Probabilidade_da_Oportunidade__c = '34%'
      )
    );
    insert testOpps;
  }

  @isTest
  static void testGetRecords() {
    Test.startTest();
    List<Opportunity> records = KanbanDataController.getRecords();
    Test.stopTest();

    System.assertEquals(2, records.size(), 'Deveria retornar 2 oportunidades');
    System.assertEquals(
      'Conta Teste',
      records[0].Account.Name,
      'Nome da conta incorreto'
    );
    System.assert(
      records[0].Probabilidade_da_Oportunidade__c != null,
      'Probabilidade não deve ser nula'
    );
  }

  @isTest
  static void testUpdateRecordStatus() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    KanbanDataController.updateRecordStatus(opp.Id, 'Primeiro Contato');
    Test.stopTest();

    Opportunity updatedOpp = [
      SELECT StageName
      FROM Opportunity
      WHERE Id = :opp.Id
    ];
    System.assertEquals(
      'Primeiro Contato',
      updatedOpp.StageName,
      'Status não foi atualizado corretamente'
    );
  }

  @isTest
  static void testUpdateRecordStatusToValidStage() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    KanbanDataController.updateRecordStatus(opp.Id, 'Em Negociação');
    Test.stopTest();

    Opportunity updatedOpp = [
      SELECT StageName
      FROM Opportunity
      WHERE Id = :opp.Id
    ];
    System.assertEquals(
      'Em Negociação',
      updatedOpp.StageName,
      'Status não foi atualizado corretamente para Em Negociação'
    );
  }

  @isTest
  static void testDeleteRecord() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    KanbanDataController.deleteRecord(opp.Id);
    Test.stopTest();

    List<Opportunity> remainingOpps = [
      SELECT Id
      FROM Opportunity
      WHERE Id = :opp.Id
    ];
    System.assertEquals(
      0,
      remainingOpps.size(),
      'Oportunidade não foi deletada'
    );
  }

  @isTest
  static void testCloneRecord() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    Id clonedId = KanbanDataController.cloneRecord(opp.Id);
    Test.stopTest();

    Opportunity clonedOpp = [
      SELECT Name, StageName
      FROM Opportunity
      WHERE Id = :clonedId
    ];
    System.assert(
      clonedOpp.Name.contains('Cópia'),
      'Nome da oportunidade clonada incorreto'
    );
    System.assertEquals(
      'Sem contato',
      clonedOpp.StageName,
      'Status inicial incorreto'
    );
  }

  @isTest
  static void testDeleteRecordsInBulk() {
    List<Opportunity> opps = [SELECT Id FROM Opportunity];
    List<Id> oppIds = new List<Id>();
    for (Opportunity opp : opps) {
      oppIds.add(opp.Id);
    }

    Test.startTest();
    KanbanDataController.deleteRecordsInBulk(oppIds);
    Test.stopTest();

    List<Opportunity> remainingOpps = [SELECT Id FROM Opportunity];
    System.assertEquals(
      0,
      remainingOpps.size(),
      'Oportunidades não foram deletadas em massa'
    );
  }

  @isTest
  static void testInvalidStatusUpdate() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    try {
      KanbanDataController.updateRecordStatus(opp.Id, 'Status Inválido');
      System.assert(
        false,
        'Deveria ter lançado uma exceção para status inválido'
      );
    } catch (Exception e) {
      System.assert(true, 'Exceção esperada foi lançada para status inválido');
    }
    Test.stopTest();
  }

  @isTest
  static void testDeleteNonExistentRecord() {
    Test.startTest();
    try {
      KanbanDataController.deleteRecord('006000000000000');
      System.assert(
        false,
        'Deveria ter lançado uma exceção ao tentar deletar registro inexistente'
      );
    } catch (Exception e) {
      System.assert(
        true,
        'Exceção esperada foi lançada ao tentar deletar registro inexistente'
      );
    }
    Test.stopTest();
  }

  // Teste para getAvailableObjects
  // Verifica se os objetos disponíveis estão sendo retornados corretamente
  @isTest
  static void testGetAvailableObjects() {
    Test.startTest();
    List<Map<String, String>> objects = KanbanDataController.getAvailableObjects();
    Test.stopTest();

    System.assert(
      objects.size() > 0,
      'Deveria retornar pelo menos um objeto acessível'
    );
    System.assert(
      objects[0].containsKey('label'),
      'Cada objeto deveria ter uma label'
    );
    System.assert(
      objects[0].containsKey('value'),
      'Cada objeto deveria ter um value'
    );
  }

  // Teste para getAvailableFields
  // Verifica se os campos disponíveis para o objeto Opportunity estão sendo retornados corretamente
  @isTest
  static void testGetAvailableFields() {
    Test.startTest();
    List<Map<String, String>> fields = KanbanDataController.getAvailableFields(
      'Opportunity'
    );
    Test.stopTest();

    System.assert(
      fields.size() > 0,
      'Deveria retornar pelo menos um campo da Opportunity'
    );
    System.assert(
      fields[0].containsKey('label'),
      'Cada campo deveria ter um label'
    );
    System.assert(
      fields[0].containsKey('value'),
      'Cada campo deveria ter um value'
    );
    System.assert(
      fields[0].containsKey('type'),
      'Cada campo deveria ter um tipo'
    );
  }

  // Teste para getPicklistValues
  // Verifica se os valores de picklist estão sendo retornados corretamente
  @isTest
  static void testGetPicklistValuesAndFallback() {
    Test.startTest();
    // Força erro passando um campo inexistente pra cair no bloco de fallback
    List<Map<String, String>> values = KanbanDataController.getPicklistValues(
      'Opportunity',
      'CampoInvalido__c'
    );
    Test.stopTest();

    System.assert(
      values.size() > 0,
      'Deveria retornar valores padrão mesmo com erro'
    );
    System.assertEquals(
      'Sem contato',
      values[0].get('value'),
      'Primeiro valor do fallback deveria ser "Sem contato"'
    );
  }
}

================
File: jest.config.js
================
// @ts-check
const { jestConfig } = require("@salesforce/sfdx-lwc-jest/config");

module.exports = {
  ...jestConfig,
  moduleNameMapper: {
    "^lightning/platformShowToastEvent$":
      "<rootDir>/force-app/test/jest-mocks/lightning/platformShowToastEvent",
    "^lightning/navigation$":
      "<rootDir>/force-app/test/jest-mocks/lightning/navigation",
    "^lightning/platformViewManager$":
      "<rootDir>/force-app/test/jest-mocks/lightning/platformViewManager"
  },
  testEnvironment: "jsdom",
  setupFiles: ["jest-canvas-mock"],
  modulePathIgnorePatterns: ["<rootDir>/.localdevserver"],
  transformIgnorePatterns: ["/node_modules/(?!@salesforce)"]
};

================
File: package.json
================
{
  "name": "salesforce-app",
  "private": true,
  "version": "1.0.0",
  "description": "Salesforce App",
  "scripts": {
    "lint": "eslint **/{aura,lwc}/**/*.js",
    "test": "npm run test:unit",
    "test:unit": "sfdx-lwc-jest",
    "test:unit:watch": "sfdx-lwc-jest --watch",
    "test:unit:debug": "sfdx-lwc-jest --debug",
    "test:unit:coverage": "sfdx-lwc-jest --coverage",
    "prettier": "prettier --write \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
    "prettier:verify": "prettier --check \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
    "postinstall": "husky install",
    "precommit": "lint-staged"
  },
  "devDependencies": {
    "@lwc/eslint-plugin-lwc": "^2.0.0",
    "@prettier/plugin-xml": "^3.2.2",
    "@salesforce/eslint-config-lwc": "^3.7.1",
    "@salesforce/eslint-plugin-aura": "^2.0.0",
    "@salesforce/eslint-plugin-lightning": "^1.0.0",
    "@salesforce/sfdx-lwc-jest": "^7.0.1",
    "@salesforce/wire-service-jest-util": "^4.1.5",
    "eslint": "^8.57.1",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-jest": "^28.8.1",
    "husky": "^9.1.5",
    "jest-canvas-mock": "^2.5.2",
    "lint-staged": "^15.1.0",
    "prettier": "^3.1.0",
    "prettier-plugin-apex": "^2.0.1",
    "sinon": "^20.0.0"
  },
  "lint-staged": {
    "**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}": [
      "prettier --write"
    ],
    "**/{aura,lwc}/**/*.js": [
      "eslint"
    ]
  }
}

================
File: force-app/main/default/lwc/kanbanPerson/__tests__/kanbanPerson.test.js
================
// Testes para o componente de Visualização de Registros - Oportunidade
import { createElement } from "lwc";
import { registerApexTestWireAdapter } from "@salesforce/sfdx-lwc-jest";
import KanbanPerson from "c/kanbanPerson";
import getRecords from "@salesforce/apex/KanbanDataController.getRecords";
import updateRecordStatus from "@salesforce/apex/KanbanDataController.updateRecordStatus";
import deleteRecord from "@salesforce/apex/KanbanDataController.deleteRecord";
import { refreshApex } from "@salesforce/apex";

jest.mock(
  "@salesforce/apex",
  () => {
    return {
      refreshApex: jest.fn()
    };
  },
  { virtual: true }
);

// Register wire adapter
const getRecordsAdapter = registerApexTestWireAdapter(getRecords);

// Mock dos outros métodos Apex
jest.mock(
  "@salesforce/apex/KanbanDataController.updateRecordStatus",
  () => ({ default: jest.fn() }),
  { virtual: true }
);

jest.mock(
  "@salesforce/apex/KanbanDataController.deleteRecord",
  () => ({ default: jest.fn() }),
  { virtual: true }
);

// Dados mockados para testes
const mockOpportunities = [
  {
    Id: "0065g00000DvGj1AAF",
    Name: "Oportunidade Teste 1",
    StageName: "Sem contato",
    Amount: 10000,
    CloseDate: "2025-12-31",
    Account: { Name: "Conta Teste 1" },
    Probabilidade_da_Oportunidade__c: "89%"
  },
  {
    Id: "0065g00000DvGj2AAF",
    Name: "Oportunidade Teste 2",
    StageName: "Em Negociação",
    Amount: 20000,
    CloseDate: "2025-12-31",
    Account: { Name: "Conta Teste 2" },
    Probabilidade_da_Oportunidade__c: "55%"
  }
];

describe("Visualização de Registros - Oportunidade", () => {
  let element;

  beforeEach(() => {
    jest.clearAllMocks();
    // Mock do dataTransfer para eventos de drag and drop
    global.DataTransfer = function () {
      return {
        setData: jest.fn(),
        getData: jest.fn(() => "0065g00000DvGj1AAF")
      };
    };

    element = createElement("c-kanban-person", {
      is: KanbanPerson
    });
    document.body.appendChild(element);
  });

  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  // 1. Teste de carregamento inicial
  it("deve carregar oportunidades na inicialização", () => {
    // Emitir dados através do wire adapter
    getRecordsAdapter.emit(mockOpportunities);

    const cards = element.shadowRoot.querySelectorAll(".record-item");
    expect(cards.length).toBe(2);
  });

  // 2. Teste da funcionalidade de pesquisa
  it("deve filtrar oportunidades baseado no termo de pesquisa", () => {
    // Emitir dados através do wire adapter
    getRecordsAdapter.emit(mockOpportunities);

    // Simular pesquisa
    const searchInput = element.shadowRoot.querySelector("lightning-input");
    searchInput.dispatchEvent(
      new CustomEvent("change", {
        detail: { value: "Teste 1" }
      })
    );

    return Promise.resolve().then(() => {
      const records = element.shadowRoot.querySelectorAll(".record-item");
      let visibleCount = 0;
      records.forEach((record) => {
        if (
          record.style.display !== "none" &&
          record.textContent.includes("Teste 1")
        ) {
          visibleCount++;
        }
      });
      expect(visibleCount).toBe(1);
    });
  });

  // 3. Teste de drag and drop
  it("deve atualizar o status da oportunidade após drag and drop", () => {
    updateRecordStatus.mockResolvedValue();
    getRecordsAdapter.emit(mockOpportunities);

    const dataTransfer = new DataTransfer();
    const card = element.shadowRoot.querySelector(".record-item");

    card.dispatchEvent(
      new CustomEvent("dragstart", {
        detail: { dataTransfer }
      })
    );

    const dropZone = element.shadowRoot.querySelector(
      '[data-status="Em Negociação"]'
    );
    dropZone.dispatchEvent(
      new CustomEvent("drop", {
        detail: { dataTransfer }
      })
    );

    return Promise.resolve().then(() => {
      expect(updateRecordStatus).toHaveBeenCalledWith({
        recordId: "0065g00000DvGj1AAF",
        newStatus: "Em Negociação"
      });
    });
  });

  // 4. Teste de exclusão de registro
  it("deve excluir uma oportunidade", () => {
    deleteRecord.mockResolvedValue();
    getRecordsAdapter.emit(mockOpportunities);

    element.handleDelete({
      preventDefault: jest.fn(),
      stopPropagation: jest.fn(),
      currentTarget: {
        dataset: {
          id: "0065g00000DvGj1AAF"
        }
      }
    });

    return Promise.resolve().then(() => {
      expect(deleteRecord).toHaveBeenCalledWith({
        recordId: "0065g00000DvGj1AAF"
      });
    });
  });

  // 5. Teste de ordenação
  it("deve ordenar oportunidades", () => {
    getRecordsAdapter.emit(mockOpportunities);

    const sortHeader = element.shadowRoot.querySelector(
      '[data-field="Amount"]'
    );
    sortHeader.dispatchEvent(
      new CustomEvent("click", {
        currentTarget: {
          dataset: {
            field: "Amount"
          }
        }
      })
    );

    return Promise.resolve().then(() => {
      const amounts = Array.from(
        element.shadowRoot.querySelectorAll(".col-amount")
      )
        .map((col) => parseFloat(col.textContent.replace(/[^0-9.-]+/g, "")))
        .filter((amount) => !isNaN(amount));

      expect(amounts[0]).toBeLessThan(amounts[1]);
    });
  });
});

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.js-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>58.0</apiVersion>
    <isExposed>true</isExposed>
    <masterLabel>Kanban Board Genérico</masterLabel>
    <description
  >Visualização em Kanban configurável para qualquer objeto do Salesforce</description>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__RecordPage</target>
        <target>lightning__HomePage</target>
    </targets>
  
       
</LightningComponentBundle>

================
File: manifest/package.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>LeadTriggerHandler</members>
        <members>LeadTriggerHandlerTest</members>
        <name>ApexClass</name>
    </types>
    <types>
        <members>LeadTrigger</members>
        <name>ApexTrigger</name>
    </types>
    <version>58.0</version>
</Package>

================
File: README.md
================
# Kanban Board - Componente LWC Genérico

Este componente implementa uma visualização em Kanban configurável para qualquer objeto do Salesforce.

## 📖 Como Usar com Diferentes Objetos

### 1. Configurar o Componente no Builder

1. Arraste o componente "Kanban Board Genérico" para sua página
2. Configure as propriedades:
   - Nome da API do Objeto (ex: "Account", "Contact", "Custom_Object\_\_c")
   - Campo de Status (campo que define as colunas)
   - Campo de Título (geralmente "Name")
   - Campo de Subtítulo (opcional, pode usar campos relacionados como "Owner.Name")
   - Campo de Valor (opcional, campo numérico)
   - Campo de Data (opcional)
   - Textos personalizados para botões e pesquisa

### 2. Adaptar o Controller Apex

1. Copie o `KanbanDataController.cls` e renomeie para seu objeto
2. Modifique o método `getRecords()`:

```apex
@AuraEnabled(cacheable=true)
public static List<SeuObjeto__c> getRecords() {
    return [
        SELECT Id, Name, Status__c, Campo1__c, Campo2__c,
               CampoRelacionado__r.Name
        FROM SeuObjeto__c
        ORDER BY CreatedDate DESC
        LIMIT 1000
    ];
}
```

3. Atualize os outros métodos substituindo `Opportunity` por seu objeto:

```apex
SeuObjeto__c record = new SeuObjeto__c(
    Id = recordId,
    Status__c = newStatus
);
```

### 3. Configurar Status Válidos

1. No controller Apex, atualize a lista de status válidos:

```apex
Set<String> validStatuses = new Set<String>{
    'Status1',
    'Status2',
    'Status3'
};
```

2. No componente JavaScript, atualize o `statusIconMap` e `validStatuses`:

```javascript
statusIconMap = {
    'Status1': 'utility:icon1',
    'Status2': 'utility:icon2',
    'Status3': 'utility:icon3'
};

get validStatuses() {
    return ['Status1', 'Status2', 'Status3'];
}
```

### 4. Adaptar as Permissões

1. Atualize o arquivo de permissões:

```xml
<objectPermissions>
    <object>SeuObjeto__c</object>
    <allowCreate>true</allowCreate>
    <allowDelete>true</allowDelete>
    <allowEdit>true</allowEdit>
    <allowRead>true</allowRead>
</objectPermissions>
```

## 🎨 Personalizando a Aparência

### 1. Cores dos Status

No arquivo CSS (`kanbanPerson.css`), defina cores para seus status:

```css
.stage-selector[data-stage="Status1"] .slds-combobox__input {
  background-color: #sua-cor-1;
  color: #sua-cor-texto-1;
}
```

### 2. Ícones dos Status

No JavaScript, defina ícones do Lightning Design System para cada status:

```javascript
statusIconMap = {
  Status1: "utility:seu_icone_1",
  Status2: "utility:seu_icone_2"
};
```

## 📋 Exemplos de Uso

### Cliente (Account)

```html
<c-kanban-person
  object-api-name="Account"
  status-field="Status__c"
  title-field="Name"
  subtitle-field="Type"
  value-field="AnnualRevenue"
  date-field="CreatedDate"
  new-button-label="Novo Cliente"
  search-placeholder="Pesquisar clientes..."
>
</c-kanban-person>
```

### Lead

```html
<c-kanban-person
  object-api-name="Lead"
  status-field="Status"
  title-field="Name"
  subtitle-field="Company"
  value-field="AnnualRevenue"
  date-field="CreatedDate"
  new-button-label="Novo Lead"
  search-placeholder="Pesquisar leads..."
>
</c-kanban-person>
```

### Caso (Case)

```html
<c-kanban-person
  object-api-name="Case"
  status-field="Status"
  title-field="CaseNumber"
  subtitle-field="Subject"
  value-field="Priority"
  date-field="CreatedDate"
  new-button-label="Novo Caso"
  search-placeholder="Pesquisar casos..."
>
</c-kanban-person>
```

## ⚡ Considerações Importantes

1. Campo de Status:

   - Deve ser um campo do tipo picklist
   - Os valores devem corresponder aos definidos no `statusIconMap`
   - Recomendado usar campos indexados para melhor performance

2. Campos Relacionados:

   - Use a notação com ponto para campos de lookup/master-detail
   - Exemplo: `Account.Owner.Name`

3. Performance:

   - Limite padrão de 1000 registros
   - Use campos indexados sempre que possível
   - Evite campos de fórmula complexos

4. Personalização:
   - Todos os textos são configuráveis
   - Cores e ícones podem ser personalizados por CSS
   - Layout responsivo para diferentes tamanhos de tela

================
File: force-app/main/default/classes/KanbanDataController.cls
================
/**
 * @description Controlador para o componente Kanban genérico
 * Este controlador pode ser adaptado para qualquer objeto do Salesforce
 *
 * Para adaptar para outro objeto:
 * 1. Altere o tipo de retorno do método getRecords para seu objeto
 * 2. Modifique a query SOQL com os campos do seu objeto
 * 3. Atualize os métodos de CRUD para usar seu objeto
 * 4. Ajuste as verificações de permissão para seu objeto
 */
public with sharing class KanbanDataController {
  /**
   * @description Retorna a lista de registros para o Kanban
   * Modifique esta query conforme necessário para seu objeto
   * @return List<SObject> Lista de registros do objeto
   */
  @AuraEnabled(cacheable=true)
  public static List<Opportunity> getRecords() {
    return [
      SELECT
        Id,
        Name,
        StageName,
        Amount,
        CloseDate,
        Account.Name,
        Nome_do_Lead__c,
        Owner.Name,
        Probability,
        Probabilidade_da_Oportunidade__c
      FROM Opportunity
      WHERE Nome_do_Lead__c != NULL OR Account.Name != NULL
      ORDER BY CreatedDate DESC
      LIMIT 1000
    ];
  }

  /**
   * @description Atualiza o status de um registro
   * @param recordId Id do registro a ser atualizado
   * @param newStatus Novo valor do status
   */
  @AuraEnabled
  public static void updateRecordStatus(Id recordId, String newStatus) {
    // Verificar permissões CRUD
    validateCRUDPermission('update');

    // Lista de status válidos - Atualize conforme seu objeto
    Set<String> validStatuses = new Set<String>{
      'Sem contato',
      'Primeiro Contato',
      'Primeira Reunião',
      'Em Negociação',
      'Análise Contratual',
      'Convertido',
      'Perdido'
    };

    // Verificar se o status é válido
    if (!validStatuses.contains(newStatus)) {
      throw new AuraHandledException('Status inválido: ' + newStatus);
    }

    try {
      // Para outros objetos, modifique esta parte
      Opportunity record = new Opportunity(
        Id = recordId,
        StageName = newStatus
      );
      update record;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  /**
   * @description Exclui um registro
   * @param recordId Id do registro a ser excluído
   */
  @AuraEnabled
  public static void deleteRecord(Id recordId) {
    validateCRUDPermission('delete');

    try {
      // Para outros objetos, modifique esta parte
      Opportunity record = new Opportunity(Id = recordId);
      delete record;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  /**
   * @description Clona um registro
   * @param recordId Id do registro a ser clonado
   * @return Id Id do novo registro clonado
   */
  @AuraEnabled
  public static Id cloneRecord(Id recordId) {
    validateCRUDPermission('create');

    try {
      // Para outros objetos, modifique esta parte
      Opportunity originalRecord = [
        SELECT Name, StageName, Amount, CloseDate, AccountId
        FROM Opportunity
        WHERE Id = :recordId
        WITH SECURITY_ENFORCED
        LIMIT 1
      ];

      Opportunity clonedRecord = new Opportunity(
        Name = originalRecord.Name + ' - Cópia',
        StageName = 'Sem contato', // Status inicial padrão
        Amount = originalRecord.Amount,
        CloseDate = originalRecord.CloseDate,
        AccountId = originalRecord.AccountId
      );

      insert clonedRecord;
      return clonedRecord.Id;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  /**
   * @description Exclui múltiplos registros
   * @param recordIds Lista de Ids dos registros a serem excluídos
   */
  @AuraEnabled
  public static void deleteRecordsInBulk(List<Id> recordIds) {
    validateCRUDPermission('delete');

    try {
      // Para outros objetos, modifique esta parte
      List<Opportunity> recordsToDelete = [
        SELECT Id
        FROM Opportunity
        WHERE Id IN :recordIds
        WITH SECURITY_ENFORCED
      ];
      delete recordsToDelete;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  /**
   * @description Valida permissões CRUD no objeto
   * @param operation Operação a ser validada (create, update, delete)
   */
  private static void validateCRUDPermission(String operation) {
    // Para outros objetos, modifique esta parte
    Schema.DescribeSObjectResult describeResult = Opportunity.getSObjectType()
      .getDescribe();

    if (operation == 'create' && !describeResult.isCreateable()) {
      throw new AuraHandledException(
        'Você não tem permissão para criar registros.'
      );
    }
    if (operation == 'update' && !describeResult.isUpdateable()) {
      throw new AuraHandledException(
        'Você não tem permissão para atualizar registros.'
      );
    }
    if (operation == 'delete' && !describeResult.isDeletable()) {
      throw new AuraHandledException(
        'Você não tem permissão para excluir registros.'
      );
    }
  }

  /**
   * @description Retorna uma lista de objetos disponíveis
   * @return List<Map<String,String>> Lista de objetos com label e api name
   */
  @AuraEnabled(cacheable=true)
  public static List<Map<String, String>> getAvailableObjects() {
    List<Map<String, String>> objects = new List<Map<String, String>>();

    for (Schema.SObjectType objType : Schema.getGlobalDescribe().values()) {
      Schema.DescribeSObjectResult describeResult = objType.getDescribe();
      if (describeResult.isAccessible() && describeResult.isQueryable()) {
        objects.add(
          new Map<String, String>{
            'label' => describeResult.getLabel(),
            'value' => describeResult.getName()
          }
        );
      }
    }

    return objects;
  }

  /**
   * @description Retorna campos disponíveis para um objeto específico
   * @param objectName Nome da API do objeto
   * @return List<Map<String,String>> Lista de campos com label e api name
   */
  @AuraEnabled(cacheable=true)
  public static List<Map<String, String>> getAvailableFields(
    String objectName
  ) {
    List<Map<String, String>> fields = new List<Map<String, String>>();

    Schema.SObjectType objectType = Schema.getGlobalDescribe().get(objectName);
    if (objectType != null) {
      Map<String, Schema.SObjectField> fieldMap = objectType.getDescribe()
        .fields.getMap();

      for (String fieldName : fieldMap.keySet()) {
        Schema.DescribeFieldResult field = fieldMap.get(fieldName)
          .getDescribe();
        if (field.isAccessible()) {
          fields.add(
            new Map<String, String>{
              'label' => field.getLabel(),
              'value' => field.getName(),
              'type' => String.valueOf(field.getType())
            }
          );
        }
      }
    }

    return fields;
  }

  /**
   * @description Retorna os valores válidos de uma picklist
   * @param objectName Nome da API do objeto
   * @param fieldName Nome da API do campo
   * @return List<Map<String,String>> Lista de valores da picklist
   */
  @AuraEnabled(cacheable=true)
  public static List<Map<String, String>> getPicklistValues(
    String objectName,
    String fieldName
  ) {
    List<Map<String, String>> picklistValues = new List<Map<String, String>>();

    try {
      Schema.SObjectType objectType = Schema.getGlobalDescribe()
        .get(objectName);
      if (objectType != null) {
        Schema.DescribeFieldResult field = objectType.getDescribe()
          .fields.getMap()
          .get(fieldName)
          .getDescribe();

        if (field.getType() == Schema.DisplayType.PICKLIST) {
          for (Schema.PicklistEntry entry : field.getPicklistValues()) {
            if (entry.isActive()) {
              picklistValues.add(
                new Map<String, String>{
                  'label' => entry.getLabel(),
                  'value' => entry.getValue()
                }
              );
            }
          }
        }
      }
      return picklistValues;
    } catch (Exception e) {
      // Return default values if there's an error
      return new List<Map<String, String>>{
        new Map<String, String>{
          'label' => 'Sem contato',
          'value' => 'Sem contato'
        },
        new Map<String, String>{
          'label' => 'Primeiro Contato',
          'value' => 'Primeiro Contato'
        },
        new Map<String, String>{
          'label' => 'Primeira Reunião',
          'value' => 'Primeira Reunião'
        },
        new Map<String, String>{
          'label' => 'Em Negociação',
          'value' => 'Em Negociação'
        },
        new Map<String, String>{
          'label' => 'Análise Contratual',
          'value' => 'Análise Contratual'
        },
        new Map<String, String>{
          'label' => 'Convertido',
          'value' => 'Convertido'
        },
        new Map<String, String>{ 'label' => 'Perdido', 'value' => 'Perdido' }
      };
    }
  }
}

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.css
================
/* Estilos base */
.slds-box {
  transition: all 0.3s ease;
}

/* Estilos do cabeçalho */
.slds-card__header {
  padding: 0;
  border-bottom: 1px solid var(--lwc-colorBorder, #dddbda);
}

.slds-media__body {
  padding-right: 1rem;
}

/* Ajustes para o grid do cabeçalho */
.header-search {
  min-width: 240px;
  margin-bottom: 0;
}

.slds-media__figure lightning-icon {
  --sds-c-icon-color-background: #0176d3;
}

/* Alinhamento vertical dos elementos do cabeçalho */
.slds-card__header .slds-grid {
  min-height: 88px;
}

.slds-card__header .slds-col:last-child .slds-grid {
  height: 100%;
  align-items: center;
}

.kanban-column {
  min-height: 300px;
  height: calc(100vh - 200px);
  overflow-y: auto;
}

.records-container {
  position: relative;
  height: calc(100vh - 150px);
  overflow-y: auto;
  overflow-x: hidden;
  padding: 0.5rem;
  transition: background-color 0.3s ease;
}

/* Sistema de abas do Kanban */
.slds-tabs_default__nav {
  border-bottom: 0px solid var(--lwc-colorBorder, #dddbda);
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(8rem, 1fr));
  grid-gap: 1rem;

  align-items: center;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  margin-bottom: 1rem;
  overflow-x: auto;
}

.slds-tabs_default__item {
  position: relative;
  padding: 0;
  background: var(--lwc-colorBackgroundAlt, #f8f9fd);
  border-radius: var(--lwc-borderRadiusMedium, 0.25rem);
  margin-right: 0.5rem;
  color: var(--lwc-colorTextDefault, #16325c);
  font-weight: 500;
  border: 1px solid rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
  cursor: pointer;
  flex-shrink: 0;
}

.slds-tabs_default__item:last-child {
  margin-right: 0;
}

.slds-tabs_default__item .slds-tabs_default__link {
  width: 100%;
  height: 100%;
  padding: 0.2rem 1.5rem;
  display: flex;
  align-items: center;
  text-decoration: none;
  color: inherit;
}

.slds-tabs_default__item.slds-is-active {
  background-color: rgba(146, 111, 27, 0.15);
  color: var(--lwc-colorTextDefault, #16325c);
  border: 1px solid #926f1b;
  font-weight: 600;
}

.slds-tabs_default__item.slds-is-active .slds-badge.slds-badge_lightest {
  background-color: #ffffff;
  color: #926f1b;
}

.slds-tabs_default__item.slds-is-active lightning-icon {
  --sds-c-icon-color-foreground-default: var(--lwc-colorTextDefault, #16325c);
}

.slds-tabs_default__item:hover {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f7ff);
  border-color: #926f1b;
}

.slds-tabs_default__item:active {
  transform: translateY(0);
}

.slds-tabs_default__item.slds-is-active:hover {
  background-color: rgba(146, 111, 27, 0.15);
  transform: none;
}

.slds-tabs_default__item.drag-over {
  background-color: rgba(146, 111, 27, 0.1);
  border: 2px dashed #926f1b;
  box-shadow: var(--lwc-shadowDrag, 0 2px 4px 0 rgba(0, 0, 0, 0.1));
}

/* Remove todos os pseudo-elementos e setas */
.slds-tabs_default__item::after {
  display: none;
}

/* Badge de contagem */
.slds-badge.slds-badge_lightest {
  color: #926f1b;
  font-weight: var(--lwc-fontWeightBold, 600);
  margin-left: 0.5rem;
  font-size: 0.75rem;
}

/* Para o badge na aba ativa, mantemos a mesma cor amarela */
.slds-tabs_default__item.slds-is-active .slds-badge.slds-badge_lightest {
  background-color: #926f1b;
  color: #ffffff;
  border-color: transparent;
}

/* Estilos para os cards e containers */
.records-container.drag-over {
  background-color: rgba(146, 111, 27, 0.1);
  border: 2px dashed #926f1b;
}

.kanban-card {
  background: var(--lwc-colorBackground, #ffffff);
  border: 1px solid var(--lwc-colorBorder, #d8dde6);
  border-left: 4px solid #926f1b;
  box-shadow: var(--lwc-shadowDrag, 0 2px 3px 0 rgba(0, 0, 0, 0.05));
  cursor: move;
  position: relative;
  transition: all 0.3s ease;
}

.kanban-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--lwc-shadowDropDown, 0 2px 3px 0 rgba(0, 0, 0, 0.16));
}

.kanban-card.dragging {
  opacity: 0.7;
  transform: scale(0.98);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
}

/* Estilo do grid e colunas */
.slds-grid {
  display: flex;
  align-items: center;
  margin: 0;
  width: 100%;
  min-width: 0;
}

.slds-col {
  position: relative;
  padding: 0.25rem;
  min-width: 0;
  white-space: nowrap;
  text-overflow: ellipsis;
}

/* Tamanhos fixos das colunas */
.col-checkbox {
  width: 30px;
  min-width: 30px;
  max-width: 40px;
}

.col-type {
  width: 50px;
  min-width: 50px;
}

.col-name {
  width: 200px;
  min-width: 100px;
}

.col-account {
  width: 180px;
  min-width: 100px;
}

.col-amount {
  width: 120px;
  min-width: 100px;
}

.col-probability {
  width: 100px;
  min-width: 80px;
}

.col-date {
  width: 100px;
  min-width: 80px;
}

.col-stage {
  width: 140px;
  min-width: 120px;
}

.col-owner {
  width: 150px;
  min-width: 120px;
}

.col-actions {
  width: 50px;
  min-width: 50px;
  max-width: 50px;
  padding-right: 8px;
  flex: 0 0 50px;
}

/* Cabeçalhos ordenáveis */
.sortable-header {
  cursor: pointer;
  user-select: none;
  position: relative;
  padding-right: 1.5rem;
}

.sortable-header:hover {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f3f3);
}

.sortable-header::after {
  content: "↕";
  position: absolute;
  right: 0.5rem;
  opacity: 0.5;
}

.sortable-header[data-sort="asc"]::after {
  content: "↑";
  opacity: 1;
}

.sortable-header[data-sort="desc"]::after {
  content: "↓";
  opacity: 1;
}

/* Estilização da barra de rolagem */
.records-container::-webkit-scrollbar {
  width: 5px;
}

.records-container::-webkit-scrollbar-track {
  background: var(--lwc-colorBackgroundAlt, #f1f1f1);
  border-radius: var(--lwc-borderRadiusSmall, 3px);
}

.records-container::-webkit-scrollbar-thumb {
  background: var(--lwc-colorBorder, #d8dde6);
  border-radius: var(--lwc-borderRadiusSmall, 3px);
}

.records-container::-webkit-scrollbar-thumb:hover {
  background: #b5bcc9;
}

/* Menu dropdown e ações */
.slds-dropdown-trigger {
  position: relative;
  margin-left: auto;
  z-index: 9999;
}

.slds-dropdown-trigger .slds-dropdown {
  display: none;
  position: fixed; /* Alterado para fixed para evitar problemas com elementos sobrepostos */
  right: auto; /* Removido o right anterior */
  top: auto; /* Removido o top anterior */
  transform: translateY(-50%); /* Melhor posicionamento vertical */
  width: 240px; /* Aumentado o tamanho para acomodar os ícones */
  background: var(--lwc-colorBackground, white);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); /* Sombra melhorada */
  z-index: 99999;
  border: 1px solid var(--lwc-colorBorder, #dddbda);
  border-radius: var(--lwc-borderRadiusMedium, 0.25rem);
  padding: 0.5rem 0; /* Espaçamento interno */
}

/* Posicionamento do dropdown quando aberto */
.slds-dropdown-trigger.slds-is-open .slds-dropdown {
  display: block !important;
}

/* Estilo dos itens do dropdown */
.slds-dropdown__item {
  position: relative;
}

.slds-dropdown__item > a {
  display: flex;
  align-items: center;
  padding: 0.7rem 1rem;
  color: var(--lwc-colorTextDefault, #000000);
  white-space: nowrap;
  cursor: pointer;
  font-size: 0.875rem;
  transition: background-color 0.1s ease;
}

/* Ícone dentro dos itens do dropdown */
.slds-dropdown__item > a lightning-icon {
  margin-right: 0.5rem;
}

.dropdown-item {
  transition: all 0.15s ease-in-out;
}

.slds-dropdown__item > a:hover,
.slds-dropdown__item > a:focus {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f2f2);
  text-decoration: none;
  outline: 0;
  transform: translateX(2px);
  color: #0070d2;
}

.slds-dropdown__item > a:hover lightning-icon,
.slds-dropdown__item > a:focus lightning-icon {
  --sds-c-icon-color-foreground-default: #0070d2;
}

/* Divisores entre itens */
.dropdown-divider {
  height: 1px;
  margin: 0.25rem 0;
  background-color: var(--lwc-colorBorder, #dddbda);
}

/* Botão da seta aprimorado */
.slds-dropdown-trigger button.slds-button_icon {
  border-radius: 50%;
  width: 30px;
  height: 30px;
  transition: all 0.2s ease;
}

.slds-dropdown-trigger button.slds-button_icon:hover {
  background-color: #f3f3f3;
  border-color: #dddbda;
}

/* Combobox de estágio */
.stage-selector lightning-combobox {
  --sds-c-combobox-color-background: transparent;
  --sds-c-combobox-color-border: transparent;
}

.stage-selector .slds-combobox_container {
  min-width: 140px;
}

.stage-selector .slds-combobox__input {
  font-size: 0.75rem;
  text-transform: uppercase;
  padding: 0.25rem 0.75rem;
  background-color: #f3f3f3;
  border-radius: 0.25rem;
  border: 1px solid transparent;
  transition: all 0.2s ease;
  font-weight: 500;
  color: #444444;
}

.stage-selector .slds-combobox__input:hover {
  background-color: #e5e5e5;
  border-color: #dddbda;
}

.stage-selector .slds-combobox__input:focus {
  background-color: white;
  border-color: #0070d2;
  box-shadow: 0 0 3px #0070d2;
}

/* Cores por estágio específicas da instituição */
.stage-selector[data-stage="Sem contato"] .slds-combobox__input {
  background-color: #f3f3f3;
  color: #16325c;
}

.stage-selector[data-stage="Primeiro Contato"] .slds-combobox__input {
  background-color: #fdf0d4;
  color: #514f4d;
}

.stage-selector[data-stage="Primeira Reunião"] .slds-combobox__input {
  background-color: #d8e6fe;
  color: #1b5297;
}

.stage-selector[data-stage="Em Negociação"] .slds-combobox__input {
  background-color: #cce9ff;
  color: #1b5297;
}

.stage-selector[data-stage="Análise Contratual"] .slds-combobox__input {
  background-color: #45c65a;
  color: #ffffff;
}

.stage-selector[data-stage="Convertido"] .slds-combobox__input {
  background-color: #027e46;
  color: #ffffff;
}

.stage-selector[data-stage="Perdido"] .slds-combobox__input {
  background-color: #ffe3e3;
  color: #ba0517;
}

/* Animação de loading durante atualização do estágio */
.stage-selector.stage-updating {
  position: relative;
}

.stage-selector.stage-updating::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

/* Pesquisa e cabeçalho */
.header-search {
  min-width: 240px;
  padding-right: 1rem;
}

.search-box {
  margin-bottom: 0;
}

/* Ajustes para o ícone de oportunidade */
.slds-media__figure lightning-icon {
  --sds-c-icon-color-background: #0176d3;
}

.slds-card__header .slds-text-heading_medium {
  margin-bottom: 4px;
}

.records-container .slds-illustration_small {
  max-width: 500px;
  margin: 0 auto;
}

/* Responsividade */
@media screen and (max-width: 768px) {
  .kanban-column {
    height: auto;
    min-height: 200px;
    max-height: 400px;
  }

  .slds-tabs_default__item {
    padding: 0.5rem;
    font-size: 0.8rem;
  }

  .records-container {
    height: calc(100vh - 200px);
    max-height: 400px;
  }

  .slds-grid {
    flex-wrap: wrap;
  }

  .slds-col {
    flex: 1 1 50%;
  }

  .list-header {
    display: none;
  }
}

.probability-value {
  font-size: 0.75rem;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  background-color: #f3f3f3;
  text-align: center;
  font-weight: 500;
  width: fit-content;
  min-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0.5rem;
}

.slds-modal {
  z-index: 9002 !important;
}

.slds-backdrop {
  z-index: 9000 !important;
}

.configuration-modal {
  position: fixed !important;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 9999;
}

.configuration-modal .slds-modal__container {
  z-index: 9002;
}

.configuration-modal .slds-backdrop {
  z-index: 9001;
}

/* Estilos para o modal de pesquisa avançada */
.advanced-search-modal .slds-modal__container {
  width: 80%;
  max-width: 800px;
}

.search-category {
  background-color: #f8f9fd;
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 16px;
  height: 100%;
}

.search-options {
  list-style: none;
  margin: 0;
  padding: 0;
  max-height: 200px;
  overflow-y: auto;
}

.search-option {
  padding: 8px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  display: flex;
  align-items: center;
  font-size: 14px;
  margin-bottom: 4px;
}

.search-option:hover {
  background-color: rgba(146, 111, 27, 0.1);
}

.search-option lightning-icon {
  margin-right: 8px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Estilos para a barra de seleção estilo Gmail */
.selection-bar-container {
  position: sticky;
  top: 0;
  left: 0;
  right: 0;
  z-index: 100;
  background-color: white;
  color: #444444;
  padding: 0 1rem;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid #e0e0e0;
}

.selection-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 56px;
  transition: all 0.3s ease;
}

.selection-count {
  display: flex;
  align-items: center;
  font-weight: 500;
}

.selection-text {
  margin-left: 8px;
  font-size: 15px;
}

.selection-actions {
  display: flex;
  align-items: center;
  gap: 16px;
}

.selection-action {
  color: #444444 !important;
  border-radius: 50%;
  width: 40px;
  height: 40px;
}

.selection-action:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

.selection-clear {
  color: #444444 !important;
  border-radius: 50%;
  width: 32px;
  height: 32px;
}

/* Estilo para cards selecionáveis */
.record-item {
  transition: background-color 0.2s ease;
  position: relative;
}

.record-item.selected {
  background-color: rgba(11, 87, 208, 0.08);
  border: 1px solid #0b57d0;
}

/* Area clicável para selecionar o card (limitada ao conteúdo do card) */
.selectable-area {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  cursor: pointer;
  z-index: 1;
}

/* Certificando que elementos interativos estejam acima da área clicável */
.record-item a,
.record-item button,
.record-item lightning-input,
.record-item lightning-combobox,
.slds-dropdown-trigger {
  position: relative;
  z-index: 2;
}

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.html
================
<!-- 
    Componente de Visualização de Registros - Oportunidade
    Este template implementa um sistema de visualização e gerenciamento de registros
-->
<template>
  <!-- Modal de Pesquisa Avançada -->
  <div if:true={isAdvancedSearchModalOpen}>
    <!-- Backdrop -->
    <div class="slds-backdrop slds-backdrop_open" style="z-index: 9000"></div>

    <section
      role="dialog"
      tabindex="-1"
      aria-modal="true"
      class="slds-modal slds-fade-in-open"
      style="z-index: 9002"
    >
      <div class="slds-modal__container">
        <header class="slds-modal__header">
          <h2 class="slds-modal__title slds-hyphenate">Pesquisa Avançada</h2>
          <button
            class="slds-button slds-button_icon slds-modal__close"
            onclick={closeAdvancedSearchModal}
          >
            <lightning-icon
              icon-name="utility:close"
              size="small"
              alternative-text="Fechar"
            ></lightning-icon>
          </button>
        </header>

        <div class="slds-modal__content slds-p-around_medium">
          <div class="slds-grid slds-wrap slds-gutters">
            <div
              class="slds-col slds-size_1-of-1 slds-medium-size_1-of-1 slds-large-size_1-of-1"
            >
              <lightning-input
                type="search"
                label="Pesquisar"
                placeholder="Digite sua pesquisa..."
                value={searchTerm}
                onchange={handleSearchTermChange}
                class="slds-m-bottom_medium"
              ></lightning-input>
            </div>

            <!-- Proprietários -->
            <div
              class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3"
            >
              <div class="search-category">
                <div class="slds-text-title_caps slds-m-bottom_x-small">
                  Proprietários
                </div>
                <ul class="search-options">
                  <template for:each={ownerSuggestions} for:item="owner">
                    <li
                      key={owner.id}
                      class="search-option"
                      onclick={handleSuggestionClick}
                      data-value={owner.name}
                      data-type="owner"
                    >
                      <lightning-icon
                        icon-name="standard:user"
                        size="x-small"
                        class="slds-m-right_x-small"
                      ></lightning-icon>
                      <span>{owner.name}</span>
                    </li>
                  </template>
                </ul>
              </div>
            </div>

            <!-- Valores -->
            <div
              class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3"
            >
              <div class="search-category">
                <div class="slds-text-title_caps slds-m-bottom_x-small">
                  Valores
                </div>
                <ul class="search-options">
                  <li
                    class="search-option"
                    onclick={handleSuggestionClick}
                    data-value="value:>10000"
                    data-type="value"
                  >
                    <lightning-icon
                      icon-name="utility:moneybag"
                      size="x-small"
                      class="slds-m-right_x-small"
                    ></lightning-icon>
                    <span>Valor > R$ 10.000</span>
                  </li>
                  <li
                    class="search-option"
                    onclick={handleSuggestionClick}
                    data-value="value:<5000"
                    data-type="value"
                  >
                    <lightning-icon
                      icon-name="utility:moneybag"
                      size="x-small"
                      class="slds-m-right_x-small"
                    ></lightning-icon>
                    <span>Valor &lt; R$ 5.000</span>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Datas -->
            <div
              class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3"
            >
              <div class="search-category">
                <div class="slds-text-title_caps slds-m-bottom_x-small">
                  Datas
                </div>
                <ul class="search-options">
                  <li
                    class="search-option"
                    onclick={handleSuggestionClick}
                    data-value="date:thismonth"
                    data-type="date"
                  >
                    <lightning-icon
                      icon-name="utility:date_time"
                      size="x-small"
                      class="slds-m-right_x-small"
                    ></lightning-icon>
                    <span>Este mês</span>
                  </li>
                  <li
                    class="search-option"
                    onclick={handleSuggestionClick}
                    data-value="date:lastmonth"
                    data-type="date"
                  >
                    <lightning-icon
                      icon-name="utility:date_time"
                      size="x-small"
                      class="slds-m-right_x-small"
                    ></lightning-icon>
                    <span>Mês passado</span>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Estágios -->
            <div
              class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-large-size_1-of-3"
            >
              <div class="search-category">
                <div class="slds-text-title_caps slds-m-bottom_x-small">
                  Estágios
                </div>
                <ul class="search-options">
                  <template for:each={statusSuggestions} for:item="status">
                    <li
                      key={status.value}
                      class="search-option"
                      onclick={handleSuggestionClick}
                      data-value={status.value}
                      data-type="stage"
                    >
                      <lightning-icon
                        icon-name={status.iconName}
                        size="x-small"
                        class="slds-m-right_x-small"
                      ></lightning-icon>
                      <span>{status.label}</span>
                    </li>
                  </template>
                </ul>
              </div>
            </div>
          </div>
        </div>

        <footer class="slds-modal__footer">
          <button
            class="slds-button slds-button_neutral"
            onclick={closeAdvancedSearchModal}
          >
            Cancelar
          </button>
          <button
            class="slds-button slds-button_brand"
            onclick={applyAdvancedSearch}
          >
            Aplicar Filtros
          </button>
        </footer>
      </div>
    </section>
  </div>

  <!-- Conteúdo original completo do componente Kanban Person abaixo -->
  <!-- Começo do conteúdo original -->

  <!-- 
      Componente de Visualização de Registros - Oportunidade
      Este template implementa um sistema de visualização e gerenciamento de registros
    -->
  <!-- Container principal com estilo de card do SLDS -->
  <div class="slds-card slds-card_boundary">
    <div class="slds-card__header">
      <!-- Título, ícone, descrição e ações na mesma linha -->
      <div class="slds-grid slds-grid_vertical-align-center slds-wrap">
        <!-- Coluna do título -->
        <div class="slds-col slds-size_1-of-2">
          <div class="slds-media slds-media_center slds-p-around_medium">
            <div class="slds-media__figure">
              <lightning-icon
                icon-name="standard:opportunity"
                size="medium"
                alternative-text="Visualização de Registros"
                title="Visualização de Registros"
              >
              </lightning-icon>
            </div>
            <div class="slds-media__body">
              <h1 class="slds-text-heading_medium">
                Visualização de Registros - Oportunidade
              </h1>
              <p class="slds-text-body_small slds-line-height_reset">
                Gerencie seus registros de forma visual e eficiente
              </p>
            </div>
          </div>
        </div>

        <!-- Coluna das ações alinhada à direita -->
        <div class="slds-col slds-size_1-of-2">
          <div class="slds-grid slds-grid_align-end slds-p-horizontal_medium">
            <div class="slds-form-element header-search">
              <div class="slds-form-element__control slds-grid">
                <lightning-input
                  type="search"
                  label="Pesquisar oportunidades"
                  onchange={handleSearch}
                  variant="label-hidden"
                  placeholder="Pesquisa nesta lista..."
                  class="search-box"
                >
                </lightning-input>
                <lightning-button-icon
                  icon-name="utility:search"
                  variant="border-filled"
                  alternative-text="Pesquisa avançada"
                  title="Pesquisa avançada"
                  class="slds-m-left_x-small"
                  onclick={handleAdvancedSearch}
                >
                </lightning-button-icon>
              </div>
            </div>

            <lightning-button
              variant="brand"
              label="Nova Oportunidade"
              title="Criar nova oportunidade"
              onclick={handleCreateNew}
              class="slds-m-right_small"
            >
            </lightning-button>

            <template if:true={showBulkActions}>
              <div class="slds-button-group slds-m-left_small">
                <lightning-button
                  variant="destructive"
                  label="Excluir Selecionados"
                  title="Excluir Registros"
                  onclick={handleBulkDelete}
                >
                </lightning-button>
              </div>
            </template>

            <lightning-button-icon
              icon-name="utility:refresh"
              variant="border-filled"
              alternative-text="Atualizar"
              title="Atualizar"
              class="slds-m-left_small"
              onclick={handleRefresh}
            >
            </lightning-button-icon>

            <!-- Adicionar botão de configuração -->
            <lightning-button-icon
              icon-name="utility:settings"
              variant="border-filled"
              alternative-text="Configurar"
              title="Configurar"
              class="slds-m-left_small"
              onclick={toggleConfiguration}
            >
            </lightning-button-icon>
          </div>
        </div>
      </div>
    </div>

    <!-- Barra de ações para itens selecionados (estilo Gmail) -->
    <div if:true={hasSelectedRecords} class="selection-bar-container">
      <div class="selection-bar">
        <div class="selection-count">
          <button
            class="slds-button slds-button_icon selection-clear"
            title="Limpar seleção"
            onclick={handleClearSelection}
          >
            <lightning-icon
              icon-name="utility:close"
              size="small"
            ></lightning-icon>
          </button>
          <span class="selection-text">{selectedCount} selecionados</span>
        </div>
        <div class="selection-actions">
          <button
            class="slds-button slds-button_icon selection-action"
            title="Excluir selecionados"
            onclick={handleBulkDelete}
          >
            <lightning-icon
              icon-name="utility:delete"
              size="small"
            ></lightning-icon>
          </button>
          <button
            class="slds-button slds-button_icon selection-action"
            title="Exportar selecionados"
            onclick={handleBulkExport}
          >
            <lightning-icon
              icon-name="utility:download"
              size="small"
            ></lightning-icon>
          </button>
          <button
            class="slds-button slds-button_icon selection-action"
            title="Mover selecionados"
            onclick={handleBulkMove}
          >
            <lightning-icon
              icon-name="utility:move"
              size="small"
            ></lightning-icon>
          </button>
        </div>
      </div>
    </div>

    <div class="slds-card__body">
      <!-- Sistema de abas do SLDS -->
      <div class="slds-tabs_default">
        <!-- Navegação entre abas com suporte a drop -->
        <ul class="slds-tabs_default__nav" role="tablist">
          <template for:each={columns} for:item="column" for:index="index">
            <li
              key={column.label}
              class={column.tabClass}
              role="presentation"
              ondrop={handleDrop}
              ondragover={allowDrop}
              data-status={column.value}
            >
              <a
                class="slds-tabs_default__link"
                role="tab"
                tabindex={column.tabIndex}
                aria-selected={column.isActive}
                aria-controls={column.tabPanelId}
                data-index={index}
                onclick={handleTabClick}
              >
                <div class="slds-media slds-media_center">
                  <div class="slds-media__figure">
                    <lightning-icon
                      icon-name={column.iconName}
                      size="x-small"
                    ></lightning-icon>
                  </div>
                  <div class="slds-media__body">
                    <span>{column.label}</span>
                    <span
                      class="slds-badge slds-badge_lightest slds-m-left_small"
                      >{column.recordCount}</span
                    >
                  </div>
                </div>
              </a>
            </li>
          </template>
        </ul>

        <!-- Conteúdo de cada aba -->
        <template for:each={columns} for:item="column" for:index="index">
          <div
            key={column.label}
            id={column.tabPanelId}
            class={column.tabPanelClass}
            role="tabpanel"
            aria-labelledby={column.tabId}
          >
            <!-- Container dos cartões com scroll vertical -->
            <div
              class="slds-p-around_x-small records-container"
              ondrop={handleDrop}
              ondragover={allowDrop}
              data-status={column.value}
            >
              <!-- Cabeçalhos das colunas -->
              <div
                class="slds-grid slds-grid_vertical-align-center slds-border_bottom slds-p-bottom_x-small list-header"
              >
                <!-- Checkbox (vazio para manter alinhamento) -->
                <div class="slds-col col-checkbox"></div>
                <!-- Tipo -->
                <div class="slds-col col-type">
                  <div class="slds-text-title_caps slds-text-color_weak">
                    Tipo
                  </div>
                </div>
                <!-- Nome da Oportunidade -->
                <div class="slds-col col-name">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Name"
                  >
                    Nome da Oportunidade
                  </div>
                </div>
                <!-- Nome da Conta -->
                <div class="slds-col col-account">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="AccountName"
                  >
                    Nome da Conta
                  </div>
                </div>
                <!-- Valor -->
                <div class="slds-col col-amount">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Amount"
                  >
                    Valor
                  </div>
                </div>
                <!-- Probabilidade -->
                <div class="slds-col col-probability">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Probability"
                  >
                    Probabilidade
                  </div>
                </div>
                <!-- Data de Fechamento -->
                <div class="slds-col col-date">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="CloseDate"
                  >
                    Data de Fechamento
                  </div>
                </div>
                <!-- Proprietário -->
                <div class="slds-col col-owner">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Owner.Name"
                  >
                    Proprietário
                  </div>
                </div>
                <!-- Estágio -->
                <div class="slds-col col-stage">
                  <div class="slds-text-title_caps slds-text-color_weak">
                    Estágio
                  </div>
                </div>
              </div>

              <!-- Lista de registros -->
              <ul
                class="slds-has-dividers_around-space slds-has-list-interactions slds-m-top_x-small"
              >
                <template for:each={column.records} for:item="record">
                  <li
                    key={record.Id}
                    class={record.cardClass}
                    draggable="true"
                    ondragstart={handleDrag}
                    ondragend={handleDragEnd}
                    data-id={record.Id}
                  >
                    <!-- Área clicável para selecionar o card sobreposta ao conteúdo do card -->
                    <div
                      class="selectable-area"
                      data-id={record.Id}
                      onclick={handleCardClick}
                    ></div>
                    <div class="slds-grid slds-grid_vertical-align-center">
                      <!-- Checkbox -->
                      <div class="slds-col col-checkbox">
                        <lightning-input
                          type="checkbox"
                          data-id={record.Id}
                          checked={record.selected}
                          onchange={handleRecordSelection}
                          variant="label-hidden"
                        >
                        </lightning-input>
                      </div>
                      <!-- Tipo -->
                      <div class="slds-col col-type">
                        <lightning-icon
                          icon-name={record.iconName}
                          size="x-small"
                          class="slds-m-right_x-small"
                        >
                        </lightning-icon>
                      </div>
                      <!-- Nome da Oportunidade -->
                      <div class="slds-col col-name">
                        <div class="slds-truncate" title={record.Name}>
                          <a
                            href="javascript:void(0);"
                            onclick={handleNavigateToRecord}
                            data-id={record.Id}
                            class="slds-text-link_reset"
                            style="text-decoration: underline"
                          >
                            {record.Name}
                          </a>
                        </div>
                      </div>
                      <!-- Nome da Conta -->
                      <div class="slds-col col-account">
                        <div class="slds-truncate" title={record.AccountName}>
                          {record.AccountName}
                          <template if:true={record.hasLeadName}>
                            <lightning-icon
                              icon-name="utility:info"
                              size="xx-small"
                              class="slds-m-left_xx-small"
                              alternative-text="Nome do Lead"
                              title="Este é o nome do Lead"
                            ></lightning-icon>
                          </template>
                        </div>
                      </div>
                      <!-- Valor -->
                      <div class="slds-col col-amount">
                        <div class="slds-truncate" title={record.Amount}>
                          <lightning-formatted-number
                            value={record.Amount}
                            format-style="currency"
                            currency-code="BRL"
                          >
                          </lightning-formatted-number>
                        </div>
                      </div>
                      <!-- Probabilidade -->
                      <div class="slds-col col-probability">
                        <div class="slds-truncate probability-value">
                          {record.Probabilidade_da_Oportunidade__c}
                        </div>
                      </div>
                      <!-- Data -->
                      <div class="slds-col col-date">
                        <div class="slds-truncate">
                          <template if:true={record.CloseDate}>
                            <lightning-formatted-date-time
                              value={record.CloseDate}
                              year="2-digit"
                              month="2-digit"
                              day="2-digit"
                            >
                            </lightning-formatted-date-time>
                          </template>
                        </div>
                      </div>
                      <!-- Proprietário -->
                      <div class="slds-col col-owner">
                        <div class="slds-truncate" title={record.OwnerName}>
                          {record.OwnerName}
                        </div>
                      </div>
                      <!-- Estágio -->
                      <div class="slds-col col-stage">
                        <div
                          class="stage-selector"
                          data-stage={record.StageName}
                        >
                          <lightning-combobox
                            name="stage"
                            variant="label-hidden"
                            value={record.StageName}
                            options={stageOptions}
                            data-id={record.Id}
                            onchange={handleStageChange}
                            dropdown-class="stage-dropdown"
                          >
                          </lightning-combobox>
                        </div>
                      </div>
                      <div class="slds-col col-actions slds-text-align_right">
                        <div
                          class="slds-dropdown-trigger slds-dropdown-trigger_click"
                        >
                          <button
                            class="slds-button slds-button_icon slds-button_icon-border-filled"
                            onclick={handleActionClick}
                            data-id={record.Id}
                            aria-haspopup="true"
                          >
                            <lightning-icon
                              icon-name="utility:chevrondown"
                              size="small"
                              alternative-text="Mostrar menu"
                            >
                            </lightning-icon>
                          </button>
                          <div
                            class="slds-dropdown slds-dropdown_right"
                            role="menu"
                          >
                            <ul class="slds-dropdown__list" role="menu">
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleViewDetails}
                                  data-id={record.Id}
                                  class="dropdown-item"
                                >
                                  <lightning-icon
                                    icon-name="utility:preview"
                                    size="x-small"
                                    class="slds-m-right_x-small"
                                  ></lightning-icon>
                                  <span
                                    class="slds-truncate"
                                    title="Ver Detalhes"
                                    >Ver Detalhes</span
                                  >
                                </a>
                              </li>
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleEdit}
                                  data-id={record.Id}
                                  class="dropdown-item"
                                >
                                  <lightning-icon
                                    icon-name="utility:edit"
                                    size="x-small"
                                    class="slds-m-right_x-small"
                                  ></lightning-icon>
                                  <span class="slds-truncate">Editar</span>
                                </a>
                              </li>
                              <li
                                class="slds-has-divider_top-space"
                                role="separator"
                              ></li>

                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleAddTask}
                                  data-id={record.Id}
                                  class="dropdown-item"
                                >
                                  <lightning-icon
                                    icon-name="utility:task"
                                    size="x-small"
                                    class="slds-m-right_x-small"
                                  ></lightning-icon>
                                  <span
                                    class="slds-truncate"
                                    title="Adicionar Tarefa"
                                    >Adicionar Tarefa</span
                                  >
                                </a>
                              </li>
                              <li
                                class="slds-has-divider_top-space"
                                role="separator"
                              ></li>
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleClone}
                                  data-id={record.Id}
                                  class="dropdown-item"
                                >
                                  <lightning-icon
                                    icon-name="utility:copy"
                                    size="x-small"
                                    class="slds-m-right_x-small"
                                  ></lightning-icon>
                                  <span class="slds-truncate">Duplicar</span>
                                </a>
                              </li>
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleDelete}
                                  data-id={record.Id}
                                  class="dropdown-item"
                                >
                                  <lightning-icon
                                    icon-name="utility:delete"
                                    size="x-small"
                                    class="slds-m-right_x-small"
                                  ></lightning-icon>
                                  <span class="slds-truncate" title="Excluir"
                                    >Excluir</span
                                  >
                                </a>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                </template>
              </ul>

              <!-- Mensagem quando não há registros -->
              <template if:true={column.isEmpty}>
                <div
                  class="slds-illustration slds-illustration_small slds-p-around_medium"
                >
                  <div class="slds-text-align_center slds-m-vertical_medium">
                    <h3 class="slds-text-heading_medium">
                      Nenhuma oportunidade nesta categoria
                    </h3>
                    <p class="slds-text-body_regular slds-m-vertical_small">
                      Comece adicionando uma nova oportunidade nesta fase do
                      pipeline
                    </p>
                    <lightning-button
                      variant="brand"
                      label="Nova Oportunidade"
                      title="Criar nova oportunidade"
                      onclick={handleCreateNew}
                      class="slds-m-top_small"
                    >
                    </lightning-button>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>
    </div>
  </div>

  <!-- Painel de Configuração movido para o final -->
  <div
    if:true={isConfiguring}
    class="configuration-modal slds-modal slds-fade-in-open"
  >
    <div class="slds-modal__container">
      <header class="slds-modal__header">
        <h2 class="slds-text-heading_medium">Configurar Kanban</h2>
        <button
          class="slds-button slds-button_icon slds-modal__close"
          onclick={toggleConfiguration}
        >
          <lightning-icon
            icon-name="utility:close"
            size="small"
          ></lightning-icon>
        </button>
      </header>
      <div class="slds-modal__content slds-p-around_medium">
        <!-- Campo de Status -->
        <lightning-combobox
          label="Campo de Status"
          value={statusField}
          options={picklistFields}
          onchange={handleFieldChange}
          data-fieldname="statusField"
          class="slds-m-bottom_small"
        >
        </lightning-combobox>
      </div>
      <footer class="slds-modal__footer">
        <button
          class="slds-button slds-button_neutral"
          onclick={toggleConfiguration}
        >
          Cancelar
        </button>
        <button
          class="slds-button slds-button_brand"
          onclick={handleSaveConfiguration}
        >
          Salvar
        </button>
      </footer>
    </div>
    <div class="slds-backdrop slds-backdrop_open"></div>
  </div>
</template>

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.js
================
/**
 * @description Componente de Visualização de Registros em formato Kanban
 * Este componente implementa uma visualização em estilo quadro Kanban para qualquer objeto do Salesforce
 * que possua um campo de status/estágio.
 *
 * Para adaptar para outro objeto:
 * 1. Modifique o objeto no Apex (KanbanDataController.cls)
 * 2. Configure as propriedades abaixo conforme seu objeto
 * 3. Atualize o statusIconMap com seus status e ícones
 */
import { LightningElement, wire, track, api } from "lwc";
import { refreshApex } from "@salesforce/apex";
import { NavigationMixin } from "lightning/navigation";
import { ShowToastEvent } from "lightning/platformShowToastEvent";
import getRecords from "@salesforce/apex/KanbanDataController.getRecords";
import updateRecordStatus from "@salesforce/apex/KanbanDataController.updateRecordStatus";
import deleteRecord from "@salesforce/apex/KanbanDataController.deleteRecord";
import cloneRecord from "@salesforce/apex/KanbanDataController.cloneRecord";
import deleteRecordsInBulk from "@salesforce/apex/KanbanDataController.deleteRecordsInBulk";
import getAvailableFields from "@salesforce/apex/KanbanDataController.getAvailableFields";
import getPicklistValues from "@salesforce/apex/KanbanDataController.getPicklistValues";

export default class KanbanPerson extends NavigationMixin(LightningElement) {
  /**
   * Nome da API do objeto (ex: "Opportunity", "Account", "Custom_Object__c")
   * @type {string}
   */
  @api objectApiName = "Opportunity";

  /**
   * Campo que contém o status/estágio para as colunas do Kanban
   * @type {string}
   */
  @api statusField = "StageName";

  // Campos fixos para o Kanban de Oportunidades
  titleField = "Name";
  subtitleField = "Account.Name";
  ownerField = "Owner.Name"; // Add owner field
  valueField = "Amount";
  dateField = "CloseDate";
  newButtonLabel = "Nova Oportunidade";
  searchPlaceholder = "Pesquisar oportunidades...";
  recordLimit = 1000;

  // Propriedades internas do componente
  @track columns = [];
  @track error;
  @track searchTerm = "";
  @track sortBy = "Name";
  @track sortDirection = "asc";
  @track selectedRecords = new Set();
  @track showBulkActions = false;
  @track showDeleteModal = false;
  @track availableFields = [];
  @track picklistValues = [];
  @track _validStatuses = [];
  @track isConfiguring = false;

  // Propriedades para o modal de pesquisa avançada
  @track isAdvancedSearchModalOpen = false;
  @track ownerSuggestions = [];
  @track statusSuggestions = [];

  // Variáveis para gerenciar a seleção múltipla
  lastSelectedId = null;
  isShiftKeyPressed = false;

  recordIdToDelete;
  wiredRecordsResult;
  originalRecordsData;
  draggedRecordId;
  activeTabIndex = 0;
  activeActionButton = null;

  /**
   * Indica se há registros selecionados
   * @returns {boolean}
   */
  get hasSelectedRecords() {
    return this.selectedRecords.size > 0;
  }

  /**
   * Retorna a contagem de registros selecionados
   * @returns {number}
   */
  get selectedCount() {
    return this.selectedRecords.size;
  }

  /**
   * Mapeamento de status para ícones
   * Personalize este objeto para seus status específicos
   * @type {Object.<string, string>}
   */
  statusIconMap = {
    "Sem contato": "utility:multi_picklist",
    "Primeiro Contato": "utility:filter",
    "Primeira Reunião": "utility:file",
    "Em Negociação": "utility:adjust_value",
    "Análise Contratual": "utility:contract",
    Convertido: "utility:success",
    Perdido: "utility:error"
  };

  /**
   * Lista de status válidos para o objeto
   * Personalize esta lista com seus status específicos
   * @type {Array.<string>}
   */
  get validStatuses() {
    return this._validStatuses;
  }

  /**
   * Map para armazenar os labels dos status
   * @type {Map}
   */
  statusLabelMap = new Map();

  /**
   * @description Wire adapter para buscar registros do Apex
   */
  @wire(getRecords)
  wiredRecords(result) {
    this.wiredRecordsResult = result;
    if (result.data) {
      this.error = undefined;
      this.originalRecordsData = result.data;
      this.processData();
    } else if (result.error) {
      this.error = result.error;
    }
  }

  @wire(getAvailableFields, { objectName: "$objectApiName" })
  wiredFields({ error, data }) {
    if (data) {
      this.availableFields = data;
      this.error = undefined;
    } else if (error) {
      this.error = error;
    }
  }

  @wire(getPicklistValues, {
    objectName: "$objectApiName",
    fieldName: "$statusField"
  })
  wiredPicklistValues({ error, data }) {
    if (data) {
      this._validStatuses = data.map((item) => item.value);

      // Criar o mapa de value -> label para os status
      this.statusLabelMap.clear();
      data.forEach((item) => {
        this.statusLabelMap.set(item.value, item.label);
      });

      this.error = undefined;
      this.processData();
    } else if (error) {
      this.error = error;
      this._validStatuses = [
        "Sem contato",
        "Primeiro Contato",
        "Primeira Reunião",
        "Em Negociação",
        "Análise Contratual",
        "Convertido",
        "Perdido"
      ];
    }
  }

  // Novo método para processar os dados com todas as transformações necessárias
  processData() {
    if (!this.originalRecordsData) return;

    // 1. Aplicar filtro de pesquisa
    let processedData = this.filterRecords(this.originalRecordsData);

    // 2. Aplicar ordenação
    processedData = this.sortRecords(processedData);

    // 3. Formatar dados para o kanban
    this.formatData(processedData);
  }

  filterRecords(records) {
    if (!this.searchTerm) return records;

    const searchTermLower = this.searchTerm.toLowerCase();
    return records.filter(
      (record) =>
        record.Name?.toLowerCase().includes(searchTermLower) ||
        record.Account?.Name?.toLowerCase().includes(searchTermLower) ||
        record.StageName?.toLowerCase().includes(searchTermLower)
    );
  }

  /**
   * Manipula o evento de pesquisa quando o usuário digita
   */
  handleSearch(event) {
    this.searchTerm = event.target.value;
    this.processData();
  } /**
   * Abre o modal de pesquisa avançada ao clicar no botão
   */
  handleAdvancedSearch() {
    // Preenche as sugestões dinamicamente antes de abrir o modal
    this.generateSuggestions();
    this.isAdvancedSearchModalOpen = true;
  }

  /**
   * Fecha o modal de pesquisa avançada
   */
  closeAdvancedSearchModal() {
    this.isAdvancedSearchModalOpen = false;
  }

  /**
   * Atualiza o termo de pesquisa quando o usuário digita no campo do modal
   */
  handleSearchTermChange(event) {
    this.searchTerm = event.target.value;
  }

  /**
   * Aplica os filtros de pesquisa avançada e fecha o modal
   */
  applyAdvancedSearch() {
    // Já temos o termo de pesquisa atualizado, só precisamos processar os dados
    this.processData();
    this.closeAdvancedSearchModal();
  }

  /**
   * Gera sugestões dinâmicas com base nos dados disponíveis
   */
  generateSuggestions() {
    // Gera sugestões de proprietários (únicos)
    if (this.originalRecordsData) {
      const uniqueOwners = new Map();
      this.originalRecordsData.forEach((record) => {
        if (record.Owner && record.Owner.Name) {
          uniqueOwners.set(record.Owner.Id, {
            id: record.Owner.Id,
            name: record.Owner.Name
          });
        }
      });
      this.ownerSuggestions = Array.from(uniqueOwners.values())
        .sort((a, b) => a.name.localeCompare(b.name))
        .slice(0, 5); // Mostrar apenas os 5 primeiros para não sobrecarregar o popup
    }

    // Gera sugestões de status com base no statusIconMap
    this.statusSuggestions = this.validStatuses.map((status) => ({
      value: status,
      label: status,
      iconName: this.statusIconMap[status] || "utility:record"
    }));
  }

  /**
   * Manipula o clique em uma sugestão de pesquisa
   */
  handleSuggestionClick(event) {
    // Evita que o popup feche imediatamente
    this._preventPopupClose = true;

    const value = event.currentTarget.dataset.value;
    const type = event.currentTarget.dataset.type;

    let searchQuery = "";

    // Formata a pesquisa com base no tipo de sugestão
    switch (type) {
      case "owner":
        searchQuery = `proprietário:${value}`;
        break;
      case "value":
        searchQuery = value; // value:>10000 ou value:<5000
        break;
      case "date":
        searchQuery = value; // date:thismonth ou date:lastmonth
        break;
      case "stage":
        searchQuery = `estágio:${value}`;
        break;
      default:
        searchQuery = value;
    }

    // Preenche o campo de pesquisa com o valor formatado
    const searchInput = this.template.querySelector(".search-box");
    if (searchInput) {
      searchInput.value = searchQuery;
      // Dispara o evento de mudança para atualizar a pesquisa
      searchInput.dispatchEvent(
        new CustomEvent("change", {
          detail: { value: searchQuery }
        })
      );
    }

    // Fecha o popup após selecionar
    this.closeSearchPopup();
  }

  /**
   * @description Formata os dados para exibição no Pipeline
   * Adiciona propriedades para controle da UI de abas
   */
  formatData(records) {
    this.columns = this.validStatuses.map((status, index) => {
      let statusRecords = records.filter(
        (record) => record[this.statusField] === status
      );

      const recordsWithIcons = statusRecords.map((record) => {
        const isSelected = this.selectedRecords.has(record.Id);
        return {
          ...record,
          iconName:
            this.statusIconMap[record[this.statusField]] || "utility:record",
          Name: this.getFieldValue(record, this.titleField) || "N/A",
          Amount: this.getFieldValue(record, this.valueField) || 0,
          Probabilidade_da_Oportunidade__c:
            record.Probabilidade_da_Oportunidade__c
              ? record.Probabilidade_da_Oportunidade__c
              : "Não definido",
          CloseDate: this.getFieldValue(record, this.dateField) || null,
          AccountName: record.Nome_do_Lead__c || record.Account?.Name || "N/A",
          hasLeadName: !!record.Nome_do_Lead__c,
          OwnerName: record.Owner?.Name || "N/A",
          selected: isSelected,
          cardClass: `slds-item record-item ${isSelected ? "selected" : ""}`
        };
      });

      // Propriedades para o sistema de abas
      const isActive = index === this.activeTabIndex;
      const tabId = `tab-${status.toLowerCase().replace(/ /g, "-")}`;
      const tabPanelId = `tabPanel-${status.toLowerCase().replace(/ /g, "-")}`;

      return {
        label: status,
        value: status,
        records: recordsWithIcons,
        recordCount: statusRecords.length,
        isEmpty: statusRecords.length === 0,
        iconName: this.statusIconMap[status],
        tabClass: `slds-tabs_default__item ${isActive ? "slds-is-active" : ""}`,
        tabPanelClass: `slds-tabs_default__content ${isActive ? "slds-show" : "slds-hide"}`,
        tabIndex: isActive ? 0 : -1,
        isActive: isActive,
        tabId: tabId,
        tabPanelId: tabPanelId
      };
    });
  }

  /**
   * @description Handler para clique em aba
   * Atualiza a aba ativa e reformata os dados
   */
  handleTabClick(event) {
    // Evitar comportamento padrão
    event.preventDefault();

    // Obter índice da aba clicada
    const clickedTabIndex = parseInt(event.currentTarget.dataset.index, 10);

    // Atualizar aba ativa
    this.activeTabIndex = clickedTabIndex;

    // Reformatar dados com nova aba ativa
    if (this.wiredRecordsResult.data) {
      this.formatData(this.wiredRecordsResult.data);
    }
  }

  /**
   * @description Handler para início do drag de um card
   */
  handleDrag(event) {
    this.draggedRecordId = event.target.dataset.id;
    const item = event.currentTarget;

    // Adicionar classe para estilo durante drag
    item.classList.add("dragging");

    // Configurar o efeito de arrastar
    event.dataTransfer.effectAllowed = "move";

    // Adicionar dica visual
    const dropTargets = this.template.querySelectorAll(".records-container");
    dropTargets.forEach((target) => {
      if (!target.classList.contains("drag-over")) {
        target.classList.add("potential-drop");
      }
    });
  }

  /**
   * @description Handler para permitir o drop
   */
  allowDrop(event) {
    event.preventDefault();

    // Adicionar feedback visual durante o drag
    const dropTarget = event.currentTarget;

    // Remover classe drag-over de todos os elementos
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    // Adicionar classe drag-over ao elemento atual
    dropTarget.classList.add("drag-over");
  }

  /**
   * @description Handler para quando um card é solto em uma coluna
   */
  handleDrop(event) {
    event.preventDefault();
    const newStatus = event.currentTarget.dataset.status;

    // Remover todas as classes de feedback visual
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    this.template
      .querySelectorAll(".kanban-card")
      .forEach((card) => card.classList.remove("dragging"));

    if (this.draggedRecordId && newStatus) {
      // Encontrar o registro atual para comparar o estágio
      const currentRecord = this.findRecordById(this.draggedRecordId);
      if (currentRecord && currentRecord.StageName === newStatus) {
        // Se o estágio é o mesmo, apenas atualiza a UI sem mostrar mensagem
        return;
      }

      // Encontrar o índice da nova aba e ativá-la
      const newTabIndex = this.columns.findIndex(
        (col) => col.value === newStatus
      );
      if (newTabIndex !== -1) {
        this.activeTabIndex = newTabIndex;
        // Atualizar classes das abas
        this.columns = this.columns.map((column, index) => ({
          ...column,
          tabClass: `slds-tabs_default__item ${index === this.activeTabIndex ? "slds-is-active" : ""}`,
          isActive: index === this.activeTabIndex,
          tabIndex: index === this.activeTabIndex ? "0" : "-1"
        }));
      }

      // Se chegou aqui, o estágio é diferente, então atualiza
      updateRecordStatus({
        recordId: this.draggedRecordId,
        newStatus: newStatus
      })
        .then(() => {
          // Mostrar mensagem de sucesso com o label do status em vez do value
          const record = this.findRecordById(this.draggedRecordId);
          const statusLabel = this.statusLabelMap.get(newStatus) || newStatus;
          this.showToastMessage(
            "Sucesso",
            `${record.Name} foi movido para ${statusLabel}`,
            "success"
          );
          return refreshApex(this.wiredRecordsResult);
        })
        .catch((error) => {
          this.showToastMessage(
            "Erro",
            error.body?.message || "Erro ao atualizar o status",
            "error"
          );
          console.error("Erro ao atualizar status:", error);
        });
    }
  }

  // Adicionar evento para remover feedback visual quando o drag termina
  handleDragEnd(event) {
    event.preventDefault();
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    event.target.classList.remove("dragging");
  }

  handleActionClick(event) {
    event.preventDefault();
    event.stopPropagation();

    // Fechar todos os outros dropdowns antes de abrir o atual
    const currentTrigger = event.currentTarget.parentElement;
    this.template
      .querySelectorAll(".slds-dropdown-trigger.slds-is-open")
      .forEach((dropdown) => {
        if (dropdown !== currentTrigger) {
          dropdown.classList.remove("slds-is-open");
        }
      });

    // Toggle do menu atual
    const dropdownTrigger = event.currentTarget.parentElement;
    dropdownTrigger.classList.toggle("slds-is-open");

    // Se o dropdown está sendo aberto, posicione-o corretamente
    if (dropdownTrigger.classList.contains("slds-is-open")) {
      // Obter a posição do botão
      const button = event.currentTarget;
      const buttonRect = button.getBoundingClientRect();

      // Obter o dropdown
      const dropdown = dropdownTrigger.querySelector(".slds-dropdown");

      // Definir a posição do dropdown em relação à viewport, não ao documento
      dropdown.style.left = buttonRect.right - 300 + "px";
      dropdown.style.top = buttonRect.bottom + "px";
    }
  }

  // Fecha os dropdowns quando clicar fora
  handleClickOutside = (event) => {
    const clickedOnDropdown = event.target.closest(".slds-dropdown-trigger");

    // Se não clicou em um dropdown, fecha todos
    if (!clickedOnDropdown) {
      this.template
        .querySelectorAll(".slds-dropdown-trigger.slds-is-open")
        .forEach((dropdown) => {
          dropdown.classList.remove("slds-is-open");
        });
    }
  };

  // Fecha todos os dropdowns
  closeAllDropdowns() {
    this.template
      .querySelectorAll(".slds-dropdown-trigger.slds-is-open")
      .forEach((dropdown) => {
        dropdown.classList.remove("slds-is-open");
      });
  }

  // Handler para fechar dropdowns ao rolar a página
  handleScroll = () => {
    this.closeAllDropdowns();
  };

  // Monitora as teclas para a seleção múltipla
  handleKeyDown = (event) => {
    if (event.key === "Shift") {
      this.isShiftKeyPressed = true;
    }
  };

  handleKeyUp = (event) => {
    if (event.key === "Shift") {
      this.isShiftKeyPressed = false;
    }
  };

  connectedCallback() {
    // Adiciona listener para fechar o dropdown quando clicar fora
    document.addEventListener("click", this.handleClickOutside);
    // Adiciona listener para fechar o dropdown quando rolar a página
    document.addEventListener("scroll", this.handleScroll, true);

    // Adiciona listeners para as teclas (para seleção múltipla)
    document.addEventListener("keydown", this.handleKeyDown);
    document.addEventListener("keyup", this.handleKeyUp);
  }

  disconnectedCallback() {
    // Remove os listeners quando o componente for destruído
    document.removeEventListener("click", this.handleClickOutside);
    document.removeEventListener("scroll", this.handleScroll, true);
    document.removeEventListener("keydown", this.handleKeyDown);
    document.removeEventListener("keyup", this.handleKeyUp);
  }

  handleEdit(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;

    // Navega para a página de edição da oportunidade
    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: recordId,
        objectApiName: "Opportunity",
        actionName: "edit"
      }
    });
  }

  handleDelete(event) {
    event.preventDefault();
    event.stopPropagation();
    const recordId = event.currentTarget.dataset.id;
    const record = this.findRecordById(recordId);
    const recordName = record ? record.Name : "Registro";

    // Primeiro fechamos qualquer dropdown que esteja aberto
    this.template
      .querySelectorAll(".slds-dropdown-trigger.slds-is-open")
      .forEach((dropdown) => {
        dropdown.classList.remove("slds-is-open");
      });

    // Confirmar exclusão
    if (confirm(`Tem certeza que deseja excluir "${recordName}"?`)) {
      deleteRecord({ recordId })
        .then(() => {
          this.showToastMessage(
            "Sucesso",
            `${recordName} foi excluído com sucesso.`,
            "success"
          );
          return refreshApex(this.wiredRecordsResult);
        })
        .catch((error) => {
          this.showToastMessage(
            "Erro",
            error.body?.message || "Erro ao excluir registro",
            "error"
          );
          console.error("Erro ao excluir registro:", error);
        });
    }
  }

  handleClone(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;
    const record = this.findRecordById(recordId);
    const recordName = record ? record.Name : "Registro";

    // Primeiro fechamos qualquer dropdown que esteja aberto
    this.template
      .querySelectorAll(".slds-dropdown-trigger.slds-is-open")
      .forEach((dropdown) => {
        dropdown.classList.remove("slds-is-open");
      });

    cloneRecord({ recordId })
      .then((result) => {
        this.showToastMessage(
          "Sucesso",
          `${recordName} foi duplicado com sucesso e está na aba "Sem contato".`,
          "success"
        );

        // Ativar aba "Sem contato" para mostrar o registro duplicado
        const semContatoIndex = this.columns.findIndex(
          (column) => column.value === "Sem contato"
        );

        if (semContatoIndex !== -1) {
          this.activeTabIndex = semContatoIndex;
          this.formatData(this.wiredRecordsResult.data);
        }

        return refreshApex(this.wiredRecordsResult);
      })
      .catch((error) => {
        this.showToastMessage(
          "Erro",
          error.body?.message || "Erro ao duplicar registro",
          "error"
        );
        console.error("Erro ao clonar registro:", error);
      });
  }

  handleRefresh() {
    return refreshApex(this.wiredRecordsResult);
  }

  handleNavigateToRecord(event) {
    event.preventDefault();
    event.stopPropagation();

    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: event.currentTarget.dataset.id,
        objectApiName: "Opportunity",
        actionName: "view"
      },
      state: {
        navigationLocation: "LOOKUP" // Isso faz abrir em popup
      }
    });
  }

  /**
   * Manipula a seleção de registros através do checkbox
   */
  handleRecordSelection(event) {
    const recordId = event.target.dataset.id;
    const isSelected = event.target.checked;

    // Verifica se a tecla shift está pressionada para seleção múltipla
    if (
      this.isShiftKeyPressed &&
      this.lastSelectedId &&
      recordId !== this.lastSelectedId
    ) {
      this.selectRecordsBetween(this.lastSelectedId, recordId, isSelected);
    } else {
      // Seleção normal de um único registro
      if (isSelected) {
        this.selectedRecords.add(recordId);
      } else {
        this.selectedRecords.delete(recordId);
      }

      // Atualiza o último registro selecionado
      this.lastSelectedId = isSelected ? recordId : null;
    }

    // Atualiza a interface
    this.updateRecordsSelection();
  }

  /**
   * Manipula clique em qualquer parte do card para seleção
   */
  handleCardClick(event) {
    // Ignora se o clique foi em um botão, link ou no checkbox
    if (
      event.target.tagName === "BUTTON" ||
      event.target.tagName === "A" ||
      event.target.tagName === "INPUT" ||
      event.target.closest(".slds-dropdown-trigger") ||
      event.target.closest("lightning-icon")
    ) {
      return;
    }

    // Obtém o ID do registro
    const recordId = event.currentTarget.dataset.id;
    const isSelected = this.selectedRecords.has(recordId);

    // Inverte a seleção
    if (isSelected) {
      this.selectedRecords.delete(recordId);
      this.lastSelectedId = null;
    } else {
      // Verifica se a tecla shift está pressionada para seleção múltipla
      if (
        this.isShiftKeyPressed &&
        this.lastSelectedId &&
        recordId !== this.lastSelectedId
      ) {
        this.selectRecordsBetween(this.lastSelectedId, recordId, true);
      } else {
        this.selectedRecords.add(recordId);
        this.lastSelectedId = recordId;
      }
    }

    // Atualiza a interface
    this.updateRecordsSelection();
  }

  /**
   * Seleciona todos os registros entre dois IDs
   */
  selectRecordsBetween(startId, endId, isSelected) {
    // Encontrar os índices dos registros
    let startIndex = -1;
    let endIndex = -1;
    let allRecords = [];

    // Coletar todos os registros de todas as colunas
    this.columns.forEach((column) => {
      column.records.forEach((record) => {
        allRecords.push(record);
        if (record.Id === startId) startIndex = allRecords.length - 1;
        if (record.Id === endId) endIndex = allRecords.length - 1;
      });
    });

    // Garantir que startIndex seja menor que endIndex
    if (startIndex > endIndex) {
      [startIndex, endIndex] = [endIndex, startIndex];
    }

    // Selecionar ou desselecionar todos os registros entre os índices
    for (let i = startIndex; i <= endIndex; i++) {
      const recordId = allRecords[i].Id;
      if (isSelected) {
        this.selectedRecords.add(recordId);
      } else {
        this.selectedRecords.delete(recordId);
      }
    }

    this.lastSelectedId = endId;
  }

  /**
   * Atualiza a interface para refletir os registros selecionados
   */
  updateRecordsSelection() {
    // Atualiza as classes CSS e estados dos registros
    this.formatData(this.wiredRecordsResult.data);
  }

  /**
   * Limpa a seleção de todos os registros
   */
  handleClearSelection() {
    this.selectedRecords.clear();
    this.lastSelectedId = null;
    this.updateRecordsSelection();
  }

  /**
   * Excluir registros selecionados em massa
   */
  handleBulkDelete() {
    if (this.selectedRecords.size === 0) return;

    // Confirmar exclusão
    if (
      confirm(
        `Tem certeza que deseja excluir ${this.selectedRecords.size} registro(s) selecionado(s)?`
      )
    ) {
      deleteRecordsInBulk({
        recordIds: Array.from(this.selectedRecords)
      })
        .then(() => {
          this.showToastMessage(
            "Sucesso",
            `${this.selectedRecords.size} registro(s) excluído(s) com sucesso.`,
            "success"
          );
          this.selectedRecords.clear();
          this.lastSelectedId = null;
          return refreshApex(this.wiredRecordsResult);
        })
        .catch((error) => {
          this.showToastMessage(
            "Erro",
            error.body?.message || "Erro ao excluir registros em massa",
            "error"
          );
          console.error("Erro ao excluir registros em massa:", error);
        });
    }
  }

  /**
   * Exportar registros selecionados
   */
  handleBulkExport() {
    if (this.selectedRecords.size === 0) return;

    // Coletar dados dos registros selecionados
    const selectedIds = Array.from(this.selectedRecords);
    const selectedRecordsData = [];

    this.columns.forEach((column) => {
      column.records.forEach((record) => {
        if (this.selectedRecords.has(record.Id)) {
          selectedRecordsData.push({
            Id: record.Id,
            Nome: record.Name,
            Conta: record.AccountName,
            Valor: record.Amount,
            Probabilidade: record.Probabilidade_da_Oportunidade__c,
            DataFechamento: record.CloseDate,
            Proprietario: record.OwnerName,
            Estagio: record.StageName
          });
        }
      });
    });

    // Converter para CSV
    let csvContent = "data:text/csv;charset=utf-8,";

    // Cabeçalhos
    const headers = [
      "Id",
      "Nome",
      "Conta",
      "Valor",
      "Probabilidade",
      "Data de Fechamento",
      "Proprietário",
      "Estágio"
    ];
    csvContent += headers.join(",") + "\\n";

    // Dados
    selectedRecordsData.forEach((record) => {
      const row = [
        record.Id,
        `"${record.Nome}"`,
        `"${record.Conta}"`,
        record.Valor,
        record.Probabilidade,
        record.DataFechamento,
        `"${record.Proprietario}"`,
        `"${record.Estagio}"`
      ];
      csvContent += row.join(",") + "\\n";
    });

    // Download do arquivo
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "oportunidades_exportadas.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    this.showToastMessage(
      "Sucesso",
      `${selectedRecordsData.length} registro(s) exportado(s) com sucesso.`,
      "success"
    );
  }

  /**
   * Mover registros selecionados para um novo estágio
   */
  handleBulkMove() {
    if (this.selectedRecords.size === 0) return;

    // Criar um modal personalizado para selecionar o novo estágio
    const modal = document.createElement("div");
    modal.className = "slds-modal slds-fade-in-open";
    modal.innerHTML = `
      <div class="slds-modal__container">
        <div class="slds-modal__header">
          <h2 class="slds-text-heading_medium">Mover ${this.selectedRecords.size} registro(s)</h2>
          <button class="slds-button slds-button_icon slds-modal__close">
            <svg class="slds-button__icon" aria-hidden="true">
              <use xlink:href="/assets/icons/utility-sprite/svg/symbols.svg#close"></use>
            </svg>
            <span class="slds-assistive-text">Fechar</span>
          </button>
        </div>
        <div class="slds-modal__content slds-p-around_medium">
          <div class="slds-form-element">
            <label class="slds-form-element__label">Novo estágio:</label>
            <div class="slds-form-element__control">
              <div class="slds-select_container">
                <select class="slds-select" id="bulk-move-stage-select">
                  ${this.validStatuses.map((status) => `<option value="${status}">${status}</option>`).join("")}
                </select>
              </div>
            </div>
          </div>
        </div>
        <div class="slds-modal__footer">
          <button class="slds-button slds-button_neutral cancel-button">Cancelar</button>
          <button class="slds-button slds-button_brand confirm-button">Mover</button>
        </div>
      </div>
    `;

    const backdrop = document.createElement("div");
    backdrop.className = "slds-backdrop slds-backdrop_open";

    // Adicionar ao DOM
    document.body.appendChild(modal);
    document.body.appendChild(backdrop);

    // Configurar listeners
    const closeModal = () => {
      document.body.removeChild(modal);
      document.body.removeChild(backdrop);
    };

    modal
      .querySelector(".slds-modal__close")
      .addEventListener("click", closeModal);
    modal.querySelector(".cancel-button").addEventListener("click", closeModal);

    modal.querySelector(".confirm-button").addEventListener("click", () => {
      const newStage = modal.querySelector("#bulk-move-stage-select").value;

      // Fechar modal primeiro
      closeModal();

      // Array para armazenar as promessas de atualização
      const updatePromises = [];

      // Atualizar cada registro
      this.selectedRecords.forEach((recordId) => {
        updatePromises.push(
          updateRecordStatus({
            recordId: recordId,
            newStatus: newStage
          })
        );
      });

      // Aguardar todas as atualizações
      Promise.all(updatePromises)
        .then(() => {
          this.showToastMessage(
            "Sucesso",
            `${this.selectedRecords.size} registro(s) movido(s) para "${newStage}" com sucesso.`,
            "success"
          );
          this.selectedRecords.clear();
          this.lastSelectedId = null;
          return refreshApex(this.wiredRecordsResult);
        })
        .catch((error) => {
          this.showToastMessage(
            "Erro",
            error.body?.message || "Erro ao mover registros em massa",
            "error"
          );
          console.error("Erro ao mover registros em massa:", error);
        });
    });
  }

  get stageOptions() {
    return this.validStatuses.map((status) => ({
      label: status,
      value: status
    }));
  }

  async handleStageChange(event) {
    const recordId = event.target.dataset.id;
    const newStatus = event.detail.value;

    try {
      await updateRecordStatus({ recordId, newStatus });

      // Encontrar o índice da nova aba e atualizar
      const newTabIndex = this.columns.findIndex(
        (column) => column.value === newStatus
      );
      if (newTabIndex !== -1) {
        this.activeTabIndex = newTabIndex;
        // Atualizar classes das abas
        this.columns = this.columns.map((column, index) => ({
          ...column,
          tabClass: `slds-tabs_default__item ${index === this.activeTabIndex ? "slds-is-active" : ""}`,
          tabPanelClass: `slds-tabs_default__content ${index === this.activeTabIndex ? "slds-show" : "slds-hide"}`,
          isActive: index === this.activeTabIndex,
          tabIndex: index === this.activeTabIndex ? 0 : -1
        }));
      }

      // Mostrar mensagem de sucesso com o label do status em vez do value
      const record = this.findRecordById(recordId);
      const statusLabel = this.statusLabelMap.get(newStatus) || newStatus;
      this.showToastMessage(
        "Sucesso",
        `${record.Name} foi movido para ${statusLabel}`,
        "success"
      );

      await refreshApex(this.wiredRecordsResult);
    } catch (error) {
      this.showToastMessage(
        "Erro",
        error.body?.message || "Erro ao atualizar o status",
        "error"
      );
      console.error("Erro ao atualizar status:", error);
    }
  }

  // Método auxiliar para encontrar um registro pelo Id
  findRecordById(recordId) {
    for (const column of this.columns) {
      const record = column.records.find((rec) => rec.Id === recordId);
      if (record) {
        return record;
      }
    }
    return null;
  }

  handleSort(event) {
    const field = event.currentTarget.dataset.field;
    const currentSortDir = this.sortDirection;

    // Toggle sort direction
    this.sortDirection =
      field === this.sortBy && currentSortDir === "asc" ? "desc" : "asc";
    this.sortBy = field;

    // Atualizar ícone de ordenação
    this.template.querySelectorAll(".sortable-header").forEach((header) => {
      header.setAttribute(
        "data-sort",
        header.dataset.field === field ? this.sortDirection : ""
      );
    });

    this.processData();
  }

  sortRecords(records) {
    const isReverse = this.sortDirection === "desc";
    const field = this.sortBy;

    return [...records].sort((a, b) => {
      let valueA = this.getFieldValue(a, field);
      let valueB = this.getFieldValue(b, field);

      // Tratamento especial para o campo de probabilidade
      if (field === "Probabilidade_da_Oportunidade__c") {
        const probabilityOrder = {
          "100%": 6,
          "89%": 5,
          "55%": 4,
          "34%": 3,
          "13%": 2,
          "0%": 1
        };
        valueA = probabilityOrder[valueA] || 0;
        valueB = probabilityOrder[valueB] || 0;
      }

      // Tratamento para valores nulos/undefined
      if (valueA === null || valueA === undefined) return isReverse ? -1 : 1;
      if (valueB === null || valueB === undefined) return isReverse ? 1 : -1;

      // Converter para string minúscula para comparação de texto
      if (typeof valueA === "string" && typeof valueB === "string") {
        valueA = valueA.toLowerCase();
        valueB = valueB.toLowerCase();
      }

      // Comparação final
      return isReverse ? (valueA < valueB ? 1 : -1) : valueA < valueB ? -1 : 1;
    });
  }

  getFieldValue(record, field) {
    // Tratar campos aninhados (ex: Account.Name)
    if (field === "AccountName") {
      // Primeiro verifica o campo personalizado Nome_do_Lead__c
      if (record.Nome_do_Lead__c) {
        return record.Nome_do_Lead__c;
      }
      // Se não encontrar, usa o campo padrão Account.Name, mas acessa corretamente o objeto Account
      return record.Account?.Name || "N/A";
    }
    // Tratar campos aninhados com notação de ponto (ex: Account.Name)
    if (field.includes(".")) {
      return field.split(".").reduce((obj, key) => obj?.[key], record) || "N/A";
    }
    // Para outros campos, retorna o valor direto
    return record[field] || "";
  }

  /**
   * Abre o formulário de novo registro em um popup
   */
  handleCreateNew() {
    const defaults = encodeURIComponent(
      JSON.stringify({
        [this.statusField]: this.validStatuses[0] // Usa o primeiro status como padrão
      })
    );

    this[NavigationMixin.Navigate]({
      type: "standard__objectPage",
      attributes: {
        objectApiName: this.objectApiName,
        actionName: "new"
      },
      state: {
        navigationLocation: "LOOKUP",
        defaultFieldValues: defaults
      }
    });
  }

  handleProbabilityChange(event) {
    const recordId = event.target.dataset.recordId;
    const probability = event.detail.value;
    this.updateProbability(recordId, probability);
  }

  // Método auxiliar para mostrar mensagens toast
  showToastMessage(title, message, variant) {
    // Adicionando um atraso pequeno para garantir que o toast seja exibido após o refresh
    setTimeout(() => {
      const evt = new ShowToastEvent({
        title: title,
        message: message,
        variant: variant,
        mode: "dismissable" // Garantindo que o toast seja dismissível
      });
      this.dispatchEvent(evt);
      console.log("Toast disparado:", title, message, variant);
    }, 100);
  }

  handleFieldChange(event) {
    const fieldName = event.target.dataset.fieldname;
    const selectedValue = event.detail.value;
    this[fieldName] = selectedValue;
    return refreshApex(this.wiredRecordsResult);
  }

  toggleConfiguration() {
    this.isConfiguring = !this.isConfiguring;
    if (this.isConfiguring) {
      // Prevent scrolling of the background when modal is open
      document.body.style.overflow = "hidden";
    } else {
      // Restore scrolling when modal is closed
      document.body.style.overflow = "auto";
    }
  }

  handleSaveConfiguration() {
    this.toggleConfiguration();
    return refreshApex(this.wiredRecordsResult)
      .then(() => {
        this.showToastMessage(
          "Sucesso",
          "Configurações atualizadas com sucesso",
          "success"
        );
      })
      .catch((error) => {
        this.showToastMessage(
          "Erro",
          "Erro ao atualizar as configurações",
          "error"
        );
        console.error("Erro:", error);
      });
  }

  // Filtros para campos específicos
  get picklistFields() {
    return this.availableFields.filter((field) => field.type === "PICKLIST");
  }

  get textFields() {
    return this.availableFields.filter(
      (field) =>
        field.type === "STRING" ||
        field.type === "TEXTAREA" ||
        field.type === "REFERENCE"
    );
  }

  get numberFields() {
    return this.availableFields.filter(
      (field) =>
        field.type === "CURRENCY" ||
        field.type === "DOUBLE" ||
        field.type === "INTEGER"
    );
  }

  get dateFields() {
    return this.availableFields.filter(
      (field) => field.type === "DATE" || field.type === "DATETIME"
    );
  }

  handleViewDetails(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;

    // Navega para a página de detalhes da oportunidade
    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: recordId,
        objectApiName: this.objectApiName,
        actionName: "view"
      }
    });
  }

  handleAssignOwner(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;
    const record = this.findRecordById(recordId);

    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: recordId,
        objectApiName: this.objectApiName,
        actionName: "edit"
      },
      state: {
        defaultFieldValues: "OwnerId=",
        navigationLocation: "LOOKUP",
        focusedFieldName: "OwnerId"
      }
    });
  }

  handleAddTask(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;
    const record = this.findRecordById(recordId);

    // Cria uma nova tarefa relacionada ao registro
    this[NavigationMixin.Navigate]({
      type: "standard__objectPage",
      attributes: {
        objectApiName: "Task",
        actionName: "new"
      },
      state: {
        defaultFieldValues: `WhatId=${recordId}`,
        navigationLocation: "LOOKUP"
      }
    });
  }
}


================================================================
Instruction
================================================================
# Coding Guidelines

- Follow the Airbnb JavaScript Style Guide
- Suggest splitting files into smaller, focused units when appropriate
- Add comments for non-obvious logic. Keep all text in Portuguese
- All new features should have corresponding unit tests

# Generate Comprehensive Output

- Include all content without abbreviation, unless specified otherwise
- Optimize for handling large codebases while maintaining output quality


================================================================
End of Codebase
================================================================
