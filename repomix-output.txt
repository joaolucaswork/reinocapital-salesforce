This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.forceignore
.github/workflows/validate-salesforce.yml
.gitignore
.prettierignore
.prettierrc
config/project-scratch-def.json
force-app/main/default/aura/.eslintrc.json
force-app/main/default/classes/KanbanDataController.cls
force-app/main/default/classes/KanbanDataController.cls-meta.xml
force-app/main/default/classes/KanbanDataControllerTest.cls
force-app/main/default/classes/KanbanDataControllerTest.cls-meta.xml
force-app/main/default/flexipages/Kanban_Oportunidades.flexipage-meta.xml
force-app/main/default/lwc/.eslintrc.json
force-app/main/default/lwc/kanbanPerson/__tests__/kanbanPerson.test.js
force-app/main/default/lwc/kanbanPerson/kanbanPerson.css
force-app/main/default/lwc/kanbanPerson/kanbanPerson.html
force-app/main/default/lwc/kanbanPerson/kanbanPerson.js
force-app/main/default/lwc/kanbanPerson/kanbanPerson.js-meta.xml
force-app/main/default/permissionsets/Kanban_Board_User.permissionset-meta.xml
force-app/main/default/tabs/Kanban_Oportunidades.tab-meta.xml
force-app/test/jest-mocks/lightning/navigation.js
force-app/test/jest-mocks/lightning/platformShowToastEvent.js
jest.config.js
manifest/package.xml
mydomain.html
package.json
README.md
reinocapital-salesforce.code-workspace
scripts/apex/hello.apex
scripts/soql/account.soql
scripts/soql/api-test.soql
sfdx-project.json

================================================================
Files
================================================================

================
File: force-app/main/default/flexipages/Kanban_Oportunidades.flexipage-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<FlexiPage xmlns="http://soap.sforce.com/2006/04/metadata">
    <flexiPageRegions>
        <itemInstances>
            <componentInstance>
                <componentName>kanbanPerson</componentName>
                <identifier>c_kanbanPerson</identifier>
            </componentInstance>
        </itemInstances>
        <name>main</name>
        <type>Region</type>
    </flexiPageRegions>
    <masterLabel>Kanban Oportunidades</masterLabel>
    <template>
        <name>flexipage:defaultAppHomeTemplate</name>
    </template>
    <type>AppPage</type>
</FlexiPage>

================
File: force-app/main/default/tabs/Kanban_Oportunidades.tab-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<CustomTab xmlns="http://soap.sforce.com/2006/04/metadata">
    <description>Visualização em Kanban das Oportunidades</description>
    <flexiPage>Kanban_Oportunidades</flexiPage>
    <label>Kanban Oportunidades</label>
    <motif>Custom57: Building Block</motif>
</CustomTab>

================
File: .forceignore
================
# List files or directories below to ignore them when running force:source:push, force:source:pull, and force:source:status
# More information: https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_exclude_source.htm
#

package.xml

# LWC configuration files
**/jsconfig.json
**/.eslintrc.json

# LWC Jest
**/__tests__/**

================
File: .gitignore
================
# This file is used for Git repositories to specify intentionally untracked files that Git should ignore. 
# If you are not using git, you can delete this file. For more information see: https://git-scm.com/docs/gitignore
# For useful gitignore templates see: https://github.com/github/gitignore

# Salesforce cache
.sf/
.sfdx/
.localdevserver/
deploy-options.json

# LWC VSCode autocomplete
**/lwc/jsconfig.json

# LWC Jest coverage reports
coverage/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/

# Eslint cache
.eslintcache

# MacOS system files
.DS_Store

# Windows system files
Thumbs.db
ehthumbs.db
[Dd]esktop.ini
$RECYCLE.BIN/

# Local environment variables
.env

# Python Salesforce Functions
**/__pycache__/
**/.venv/
**/venv/

================
File: .prettierignore
================
# List files or directories below to ignore them when running prettier
# More information: https://prettier.io/docs/en/ignore.html
#

**/staticresources/**
.localdevserver
.sfdx
.sf
.vscode

coverage/

================
File: .prettierrc
================
{
  "trailingComma": "none",
  "plugins": [
    "prettier-plugin-apex",
    "@prettier/plugin-xml"
  ],
  "overrides": [
    {
      "files": "**/lwc/**/*.html",
      "options": { "parser": "lwc" }
    },
    {
      "files": "*.{cmp,page,component}",
      "options": { "parser": "html" }
    }
  ]
}

================
File: force-app/main/default/aura/.eslintrc.json
================
{
  "plugins": ["@salesforce/eslint-plugin-aura"],
  "extends": ["plugin:@salesforce/eslint-plugin-aura/recommended"],
  "rules": {
    "vars-on-top": "off",
    "no-unused-expressions": "off"
  }
}

================
File: force-app/main/default/classes/KanbanDataController.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/classes/KanbanDataControllerTest.cls
================
@isTest
private class KanbanDataControllerTest {
  @TestSetup
  static void makeData() {
    Account testAccount = new Account(Name = 'Conta Teste');
    insert testAccount;

    List<Opportunity> testOpps = new List<Opportunity>();
    testOpps.add(
      new Opportunity(
        Name = 'Oportunidade Teste 1',
        AccountId = testAccount.Id,
        StageName = 'Sem contato',
        CloseDate = Date.today().addDays(30),
        Amount = 10000,
        Probabilidade_da_Oportunidade__c = '89%'
      )
    );
    testOpps.add(
      new Opportunity(
        Name = 'Oportunidade Teste 2',
        AccountId = testAccount.Id,
        StageName = 'Em Negociação',
        CloseDate = Date.today().addDays(30),
        Amount = 20000,
        Probabilidade_da_Oportunidade__c = '34%'
      )
    );
    insert testOpps;
  }

  @isTest
  static void testGetRecords() {
    Test.startTest();
    List<Opportunity> records = KanbanDataController.getRecords();
    Test.stopTest();

    System.assertEquals(2, records.size(), 'Deveria retornar 2 oportunidades');
    System.assertEquals(
      'Conta Teste',
      records[0].Account.Name,
      'Nome da conta incorreto'
    );
    System.assert(
      records[0].Probabilidade_da_Oportunidade__c != null,
      'Probabilidade não deve ser nula'
    );
  }

  @isTest
  static void testUpdateRecordStatus() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    // Usando um status diferente de "Em Negociação"
    KanbanDataController.updateRecordStatus(opp.Id, 'Primeiro Contato');
    Test.stopTest();

    Opportunity updatedOpp = [
      SELECT StageName
      FROM Opportunity
      WHERE Id = :opp.Id
    ];
    System.assertEquals(
      'Primeiro Contato',
      updatedOpp.StageName,
      'Status não foi atualizado corretamente'
    );
  }

  @isTest
  static void testUpdateRecordStatusWithExistingActiveOpp() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    try {
      KanbanDataController.updateRecordStatus(opp.Id, 'Em Negociação');
      System.assert(false, 'Deveria ter lançado uma exceção');
    } catch (Exception e) {
      System.assert(true, 'Exceção esperada foi lançada');
    }
    Test.stopTest();
  }

  @isTest
  static void testDeleteRecord() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    KanbanDataController.deleteRecord(opp.Id);
    Test.stopTest();

    List<Opportunity> remainingOpps = [
      SELECT Id
      FROM Opportunity
      WHERE Id = :opp.Id
    ];
    System.assertEquals(
      0,
      remainingOpps.size(),
      'Oportunidade não foi deletada'
    );
  }

  @isTest
  static void testCloneRecord() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    Id clonedId = KanbanDataController.cloneRecord(opp.Id);
    Test.stopTest();

    Opportunity clonedOpp = [
      SELECT Name, StageName
      FROM Opportunity
      WHERE Id = :clonedId
    ];
    System.assert(
      clonedOpp.Name.contains('Cópia'),
      'Nome da oportunidade clonada incorreto'
    );
    System.assertEquals(
      'Sem contato',
      clonedOpp.StageName,
      'Status inicial incorreto'
    );
  }

  @isTest
  static void testDeleteRecordsInBulk() {
    List<Opportunity> opps = [SELECT Id FROM Opportunity];
    List<Id> oppIds = new List<Id>();
    for (Opportunity opp : opps) {
      oppIds.add(opp.Id);
    }

    Test.startTest();
    KanbanDataController.deleteRecordsInBulk(oppIds);
    Test.stopTest();

    List<Opportunity> remainingOpps = [SELECT Id FROM Opportunity];
    System.assertEquals(
      0,
      remainingOpps.size(),
      'Oportunidades não foram deletadas em massa'
    );
  }

  @isTest
  static void testInvalidStatusUpdate() {
    Opportunity opp = [
      SELECT Id
      FROM Opportunity
      WHERE Name = 'Oportunidade Teste 1'
      LIMIT 1
    ];

    Test.startTest();
    try {
      KanbanDataController.updateRecordStatus(opp.Id, 'Status Inválido');
      System.assert(
        false,
        'Deveria ter lançado uma exceção para status inválido'
      );
    } catch (Exception e) {
      System.assert(true, 'Exceção esperada foi lançada para status inválido');
    }
    Test.stopTest();
  }

  @isTest
  static void testDeleteNonExistentRecord() {
    Test.startTest();
    try {
      KanbanDataController.deleteRecord('006000000000000');
      System.assert(
        false,
        'Deveria ter lançado uma exceção ao tentar deletar registro inexistente'
      );
    } catch (Exception e) {
      System.assert(
        true,
        'Exceção esperada foi lançada ao tentar deletar registro inexistente'
      );
    }
    Test.stopTest();
  }
}

================
File: force-app/main/default/classes/KanbanDataControllerTest.cls-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <status>Active</status>
</ApexClass>

================
File: force-app/main/default/lwc/.eslintrc.json
================
{
  "extends": ["@salesforce/eslint-config-lwc/recommended"],
  "overrides": [
    {
      "files": ["*.test.js"],
      "rules": {
        "@lwc/lwc/no-unexpected-wire-adapter-usages": "off"
      },
      "env": {
        "node": true
      }
    }
  ]
}

================
File: force-app/main/default/permissionsets/Kanban_Board_User.permissionset-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<PermissionSet xmlns="http://soap.sforce.com/2006/04/metadata">
    <label>Kanban Board User</label>
    <description>Permissões necessárias para usar o Kanban Board</description>
    
    <!-- Permissões da Classe Apex -->
    <classAccesses>
        <apexClass>KanbanDataController</apexClass>
        <enabled>true</enabled>
    </classAccesses>

    <!-- Permissões do Objeto -->
    <objectPermissions>
        <allowCreate>true</allowCreate>
        <allowDelete>true</allowDelete>
        <allowEdit>true</allowEdit>
        <allowRead>true</allowRead>
        <modifyAllRecords>false</modifyAllRecords>
        <object>Opportunity</object>
        <viewAllRecords>false</viewAllRecords>
    </objectPermissions>

    <!-- Permissões dos Campos Customizados -->
    <fieldPermissions>
        <editable>true</editable>
        <field>Opportunity.Probabilidade_da_Oportunidade__c</field>
        <readable>true</readable>
    </fieldPermissions>
</PermissionSet>

================
File: force-app/test/jest-mocks/lightning/navigation.js
================
export const NavigationMixin = (Base) => {
  return class extends Base {
    navigate(pageReference) {
      return Promise.resolve(true);
    }
  };
};

NavigationMixin.Navigate = Symbol("Navigate");

================
File: force-app/test/jest-mocks/lightning/platformShowToastEvent.js
================
export class ShowToastEvent {
  constructor(params) {
    this.title = params.title;
    this.message = params.message;
    this.variant = params.variant;
  }
}

================
File: manifest/package.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>KanbanDataController</members>
        <members>KanbanDataControllerTest</members>
        <name>ApexClass</name>
    </types>
    <types>
        <members>kanbanPerson</members>
        <name>LightningComponentBundle</name>
    </types>
    <types>
        <members>Kanban_Board_User</members>
        <name>PermissionSet</name>
    </types>
    <types>
        <members>Kanban_Oportunidades</members>
        <name>FlexiPage</name>
    </types>
    <types>
        <members>Kanban_Oportunidades</members>
        <name>CustomTab</name>
    </types>
    <version>63.0</version>
</Package>

================
File: mydomain.html
================
<!doctype html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reino Capital</title>
    <style>
      body {
        background-color: white;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
      }
    </style>
  </head>
  <body>
    <header class="content-top"></header>
    <main class="content"></main>
  </body>
</html>

================
File: reinocapital-salesforce.code-workspace
================
{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"salesforce.einsteinForDevelopers.enable": true,
		"salesforcedx-vscode-core.show-cli-success-msg": false
	}
}

================
File: scripts/apex/hello.apex
================
// Use .apex files to store anonymous Apex.
// You can execute anonymous Apex in VS Code by selecting the
//     apex text and running the command:
//     SFDX: Execute Anonymous Apex with Currently Selected Text
// You can also execute the entire file by running the command:
//     SFDX: Execute Anonymous Apex with Editor Contents

string tempvar = 'Enter_your_name_here';
System.debug('Hello World!');
System.debug('My name is ' + tempvar);

================
File: scripts/soql/account.soql
================
// Use .soql files to store SOQL queries.
// You can execute queries in VS Code by selecting the
//     query text and running the command:
//     SFDX: Execute SOQL Query with Currently Selected Text

SELECT Id, Name FROM Account

================
File: scripts/soql/api-test.soql
================
SELECT Id, Profile.PermissionsApiOnlyUser FROM User

================
File: sfdx-project.json
================
{
  "packageDirectories": [
    {
      "path": "force-app",
      "default": true
    }
  ],
  "name": "dx-project",
  "namespace": "",
  "sfdcLoginUrl": "https://login.salesforce.com",
  "sourceApiVersion": "62.0"
}

================
File: .github/workflows/validate-salesforce.yml
================
name: Salesforce Validation Check

on:
  pull_request:
    branches:
      - sandbox
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Salesforce CLI
        run: npm install --global sfdx-cli

      - name: Authenticate Salesforce (Sandbox)
        run: echo "${{ secrets.SF_SANDBOX_AUTH_URL }}" | sf auth sfdx-url store --alias sandReino --set-default

      - name: Validate Deployment
        run: sf project deploy validate --target-org sandReino --wait 10

================
File: config/project-scratch-def.json
================
{
  "orgName": "codebuilder company",
  "edition": "Developer",
  "features": ["EnableSetPasswordInApi"],
  "settings": {
    "lightningExperienceSettings": {
      "enableS1DesktopEnabled": true,
      "enableLightningPreviewPref": true
    },
    "mobileSettings": {
      "enableS1EncryptedStoragePref2": false
    }
  }
}

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.js-meta.xml
================
<?xml version="1.0" encoding="UTF-8" ?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <isExposed>true</isExposed>
    <masterLabel>Visualisação de Registros - Oportunidade</masterLabel>
    <description
  >Componente para visualização e gerenciamento de oportunidades em formato Kanban</description>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__RecordPage</target>
        <target>lightning__HomePage</target>
    </targets>
    <targetConfigs>
        <targetConfig
      targets="lightning__AppPage,lightning__HomePage,lightning__RecordPage"
    >
            <property
        name="statusField"
        type="String"
        default="StageName"
        label="Campo de Status"
        description="Campo que será usado para as colunas do Kanban"
        required="true"
      />
            <property
        name="titleField"
        type="String"
        default="Name"
        label="Campo de Título"
        description="Campo que será exibido como título do card"
        required="true"
      />
            <property
        name="subtitleField"
        type="String"
        default="Account.Name"
        label="Campo de Subtítulo"
        description="Campo que será exibido como subtítulo do card"
      />
            <property
        name="valueField"
        type="String"
        default="Amount"
        label="Campo de Valor"
        description="Campo numérico para exibir valor"
      />
            <property
        name="dateField"
        type="String"
        default="CloseDate"
        label="Campo de Data"
        description="Campo de data para exibição"
      />
            <property
        name="recordLimit"
        type="Integer"
        default="1000"
        label="Limite de Registros"
        description="Número máximo de registros a serem exibidos"
      />
        </targetConfig>
    </targetConfigs>
</LightningComponentBundle>

================
File: force-app/main/default/lwc/kanbanPerson/__tests__/kanbanPerson.test.js
================
// Testes para o componente de Visualização de Registros - Oportunidade
import { createElement } from "lwc";
import { registerApexTestWireAdapter } from "@salesforce/sfdx-lwc-jest";
import KanbanPerson from "c/kanbanPerson";
import getRecords from "@salesforce/apex/KanbanDataController.getRecords";
import updateRecordStatus from "@salesforce/apex/KanbanDataController.updateRecordStatus";
import deleteRecord from "@salesforce/apex/KanbanDataController.deleteRecord";
import { refreshApex } from "@salesforce/apex";

jest.mock(
  "@salesforce/apex",
  () => {
    return {
      refreshApex: jest.fn()
    };
  },
  { virtual: true }
);

// Register wire adapter
const getRecordsAdapter = registerApexTestWireAdapter(getRecords);

// Mock dos outros métodos Apex
jest.mock(
  "@salesforce/apex/KanbanDataController.updateRecordStatus",
  () => ({ default: jest.fn() }),
  { virtual: true }
);

jest.mock(
  "@salesforce/apex/KanbanDataController.deleteRecord",
  () => ({ default: jest.fn() }),
  { virtual: true }
);

// Dados mockados para testes
const mockOpportunities = [
  {
    Id: "0065g00000DvGj1AAF",
    Name: "Oportunidade Teste 1",
    StageName: "Sem contato",
    Amount: 10000,
    CloseDate: "2025-12-31",
    Account: { Name: "Conta Teste 1" },
    Probabilidade_da_Oportunidade__c: "89%"
  },
  {
    Id: "0065g00000DvGj2AAF",
    Name: "Oportunidade Teste 2",
    StageName: "Em Negociação",
    Amount: 20000,
    CloseDate: "2025-12-31",
    Account: { Name: "Conta Teste 2" },
    Probabilidade_da_Oportunidade__c: "55%"
  }
];

describe("Visualização de Registros - Oportunidade", () => {
  let element;

  beforeEach(() => {
    jest.clearAllMocks();
    // Mock do dataTransfer para eventos de drag and drop
    global.DataTransfer = function () {
      return {
        setData: jest.fn(),
        getData: jest.fn(() => "0065g00000DvGj1AAF")
      };
    };

    element = createElement("c-kanban-person", {
      is: KanbanPerson
    });
    document.body.appendChild(element);
  });

  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  // 1. Teste de carregamento inicial
  it("deve carregar oportunidades na inicialização", () => {
    // Emitir dados através do wire adapter
    getRecordsAdapter.emit(mockOpportunities);

    const cards = element.shadowRoot.querySelectorAll(".record-item");
    expect(cards.length).toBe(2);
  });

  // 2. Teste da funcionalidade de pesquisa
  it("deve filtrar oportunidades baseado no termo de pesquisa", () => {
    // Emitir dados através do wire adapter
    getRecordsAdapter.emit(mockOpportunities);

    // Simular pesquisa
    const searchInput = element.shadowRoot.querySelector("lightning-input");
    searchInput.dispatchEvent(
      new CustomEvent("change", {
        detail: { value: "Teste 1" }
      })
    );

    return Promise.resolve().then(() => {
      const records = element.shadowRoot.querySelectorAll(".record-item");
      let visibleCount = 0;
      records.forEach((record) => {
        if (
          record.style.display !== "none" &&
          record.textContent.includes("Teste 1")
        ) {
          visibleCount++;
        }
      });
      expect(visibleCount).toBe(1);
    });
  });

  // 3. Teste de drag and drop
  it("deve atualizar o status da oportunidade após drag and drop", () => {
    updateRecordStatus.mockResolvedValue();
    getRecordsAdapter.emit(mockOpportunities);

    const dataTransfer = new DataTransfer();
    const card = element.shadowRoot.querySelector(".record-item");

    card.dispatchEvent(
      new CustomEvent("dragstart", {
        detail: { dataTransfer }
      })
    );

    const dropZone = element.shadowRoot.querySelector(
      '[data-status="Em Negociação"]'
    );
    dropZone.dispatchEvent(
      new CustomEvent("drop", {
        detail: { dataTransfer }
      })
    );

    return Promise.resolve().then(() => {
      expect(updateRecordStatus).toHaveBeenCalledWith({
        recordId: "0065g00000DvGj1AAF",
        newStatus: "Em Negociação"
      });
    });
  });

  // 4. Teste de exclusão de registro
  it("deve excluir uma oportunidade", () => {
    deleteRecord.mockResolvedValue();
    getRecordsAdapter.emit(mockOpportunities);

    element.handleDelete({
      preventDefault: jest.fn(),
      stopPropagation: jest.fn(),
      currentTarget: {
        dataset: {
          id: "0065g00000DvGj1AAF"
        }
      }
    });

    return Promise.resolve().then(() => {
      expect(deleteRecord).toHaveBeenCalledWith({
        recordId: "0065g00000DvGj1AAF"
      });
    });
  });

  // 5. Teste de ordenação
  it("deve ordenar oportunidades", () => {
    getRecordsAdapter.emit(mockOpportunities);

    const sortHeader = element.shadowRoot.querySelector(
      '[data-field="Amount"]'
    );
    sortHeader.dispatchEvent(
      new CustomEvent("click", {
        currentTarget: {
          dataset: {
            field: "Amount"
          }
        }
      })
    );

    return Promise.resolve().then(() => {
      const amounts = Array.from(
        element.shadowRoot.querySelectorAll(".col-amount")
      )
        .map((col) => parseFloat(col.textContent.replace(/[^0-9.-]+/g, "")))
        .filter((amount) => !isNaN(amount));

      expect(amounts[0]).toBeLessThan(amounts[1]);
    });
  });
});

================
File: jest.config.js
================
// @ts-check
const { jestConfig } = require("@salesforce/sfdx-lwc-jest/config");

module.exports = {
  ...jestConfig,
  moduleNameMapper: {
    "^lightning/platformShowToastEvent$":
      "<rootDir>/force-app/test/jest-mocks/lightning/platformShowToastEvent",
    "^lightning/navigation$":
      "<rootDir>/force-app/test/jest-mocks/lightning/navigation",
    "^lightning/platformViewManager$":
      "<rootDir>/force-app/test/jest-mocks/lightning/platformViewManager"
  },
  testEnvironment: "jsdom",
  setupFiles: ["jest-canvas-mock"],
  modulePathIgnorePatterns: ["<rootDir>/.localdevserver"],
  transformIgnorePatterns: ["/node_modules/(?!@salesforce)"]
};

================
File: package.json
================
{
  "name": "salesforce-app",
  "private": true,
  "version": "1.0.0",
  "description": "Salesforce App",
  "scripts": {
    "lint": "eslint **/{aura,lwc}/**/*.js",
    "test": "npm run test:unit",
    "test:unit": "sfdx-lwc-jest",
    "test:unit:watch": "sfdx-lwc-jest --watch",
    "test:unit:debug": "sfdx-lwc-jest --debug",
    "test:unit:coverage": "sfdx-lwc-jest --coverage",
    "prettier": "prettier --write \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
    "prettier:verify": "prettier --check \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
    "postinstall": "husky install",
    "precommit": "lint-staged"
  },
  "devDependencies": {
    "@lwc/eslint-plugin-lwc": "^2.0.0",
    "@prettier/plugin-xml": "^3.2.2",
    "@salesforce/eslint-config-lwc": "^3.7.1",
    "@salesforce/eslint-plugin-aura": "^2.0.0",
    "@salesforce/eslint-plugin-lightning": "^1.0.0",
    "@salesforce/sfdx-lwc-jest": "^7.0.1",
    "@salesforce/wire-service-jest-util": "^4.1.5",
    "eslint": "^8.57.1",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-jest": "^28.8.1",
    "husky": "^9.1.5",
    "jest-canvas-mock": "^2.5.2",
    "lint-staged": "^15.1.0",
    "prettier": "^3.1.0",
    "prettier-plugin-apex": "^2.0.1",
    "sinon": "^20.0.0"
  },
  "lint-staged": {
    "**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}": [
      "prettier --write"
    ],
    "**/{aura,lwc}/**/*.js": [
      "eslint"
    ]
  }
}

================
File: README.md
================
# Kanban Board - Salesforce LWC

Este componente implementa uma visualização em Kanban para registros do Salesforce, atualmente configurado para Oportunidades.

## 📁 Estrutura de Arquivos

```
force-app/main/default/
├── classes/
│   ├── KanbanDataController.cls           # Controlador Apex
│   └── KanbanDataControllerTest.cls       # Testes do controlador
└── lwc/
    └── kanbanPerson/
        ├── kanbanPerson.html              # Template do componente
        ├── kanbanPerson.js                # Lógica do componente
        ├── kanbanPerson.css               # Estilos do componente
        └── kanbanPerson.js-meta.xml       # Metadados do componente
```

## 🔧 Como Adaptar para Outro Objeto

### 1. Modificar o Controlador Apex (KanbanDataController.cls)

```apex
// Altere a query para o seu objeto
public with sharing class KanbanDataController {
    @AuraEnabled(cacheable=true)
    public static List<SEU_OBJETO__c> getRecords() {
        return [
            SELECT Id, Name, SEU_CAMPO_STATUS__c, SEU_CAMPO_VALOR__c, ...
            FROM SEU_OBJETO__c
            WHERE ...
            ORDER BY CreatedDate DESC
        ];
    }
}
```

### 2. Modificar o Componente JavaScript (kanbanPerson.js)

1. Altere o mapeamento de status:

```javascript
statusIconMap = {
  "Status 1": "utility:icon1",
  "Status 2": "utility:icon2"
  // Adicione seus status
};
```

2. Atualize os campos na função formatData:

```javascript
formatData(records) {
    const statuses = [
        "Status 1",
        "Status 2",
        // Seus status aqui
    ];
}
```

3. Modifique as colunas exibidas:

```javascript
// Altere os campos conforme sua necessidade
{
    label: "Nome",
    field: "Name",
    // Adicione seus campos
}
```

### 3. Atualizar o Meta XML (kanbanPerson.js-meta.xml)

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>58.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__RecordPage</target>
        <target>lightning__HomePage</target>
    </targets>
    <!-- Adicione os objetos que podem usar o componente -->
    <targetConfigs>
        <targetConfig targets="lightning__AppPage,lightning__RecordPage">
            <objects>
                <object>SEU_OBJETO__c</object>
            </objects>
        </targetConfig>
    </targetConfig>
</LightningComponentBundle>
```

## 🎨 Personalizando a Aparência

1. Cores por Status (kanbanPerson.css):

```css
.stage-selector[data-stage="Seu Status"] .slds-combobox__input {
  background-color: #sua-cor;
  color: #cor-texto;
}
```

2. Largura das Colunas:

```css
.col-sua-coluna {
  width: 200px;
  min-width: 100px;
}
```

## 📦 Deploy para Produção

1. **Via VSCode e SFDX:**

```bash
sfdx force:source:deploy -p force-app/main/default/lwc/kanbanPerson,force-app/main/default/classes/KanbanDataController.cls
```

2. **Via Pacote:**

- Use o comando `sfdx force:package:create` para criar um pacote
- Adicione os componentes ao pacote
- Deploy o pacote para produção

## ⚡ Permissões Necessárias

1. Crie um conjunto de permissões:
   - Acesso ao componente LWC
   - Acesso à classe Apex
   - Permissões de Objeto:
     - Read no objeto principal
     - Edit para alterações de status

## 🔍 Campos Personalizáveis

No arquivo kanbanPerson.js, localize e modifique:

1. **Campos Exibidos:**

```javascript
const recordsWithIcons = statusRecords.map((record) => ({
  Id: record.Id,
  Name: record.Name,
  // Adicione seus campos aqui
  SeuCampo__c: record.SeuCampo__c
}));
```

2. **Campos de Ordenação:**

```javascript
getFieldValue(record, field) {
    switch(field) {
        case "SeuCampo":
            return record.SeuCampo__c;
        // Adicione seus campos
    }
}
```

## 🚀 Performance

- O componente usa @wire para cache automático
- Implementa lazy loading para grandes conjuntos de dados
- Otimizado para mobile

## 📱 Responsividade

O componente é totalmente responsivo e se adapta a diferentes tamanhos de tela. Você pode ajustar os breakpoints em kanbanPerson.css:

```css
@media screen and (max-width: seu-tamanho) {
    // Seus ajustes aqui
}
```

================
File: force-app/main/default/classes/KanbanDataController.cls
================
public with sharing class KanbanDataController {
  @AuraEnabled(cacheable=true)
  public static List<Opportunity> getRecords() {
    return [
      SELECT
        Id,
        Name,
        StageName,
        Amount,
        CloseDate,
        Account.Name,
        Probability,
        Probabilidade_da_Oportunidade__c
      FROM Opportunity
      ORDER BY CreatedDate DESC
      LIMIT 1000
    ];
  }

  @AuraEnabled
  public static void updateRecordStatus(Id recordId, String newStatus) {
    // Verificar permissões CRUD
    if (
      !Schema.sObjectType.Opportunity.isUpdateable() ||
      !Schema.sObjectType.Opportunity.fields.StageName.isUpdateable()
    ) {
      throw new AuraHandledException(
        'Você não tem permissão para atualizar oportunidades.'
      );
    }

    // Lista de status válidos
    Set<String> validStatuses = new Set<String>{
      'Sem contato',
      'Primeiro Contato',
      'Primeira Reunião',
      'Em Negociação',
      'Análise Contratual',
      'Convertido',
      'Perdido'
    };

    // Verificar se o status é válido
    if (!validStatuses.contains(newStatus)) {
      throw new AuraHandledException('Status inválido: ' + newStatus);
    }

    // Verificação de registros ativos para o usuário atual
    List<Opportunity> activeOpps = [
      SELECT Id
      FROM Opportunity
      WHERE
        OwnerId = :UserInfo.getUserId()
        AND StageName = 'Em Negociação'
        AND Id != :recordId
      WITH SECURITY_ENFORCED
      LIMIT 1
    ];

    // Validação de regra de negócio: uma oportunidade em negociação por vez
    if (!activeOpps.isEmpty() && newStatus == 'Em Negociação') {
      throw new AuraHandledException(
        'Você já possui uma oportunidade em negociação. Finalize-a antes de mover outra.'
      );
    }

    // Atualização do registro após validação
    Opportunity opp = new Opportunity(Id = recordId, StageName = newStatus);

    try {
      update opp;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  @AuraEnabled
  public static void deleteRecord(Id recordId) {
    if (!Schema.sObjectType.Opportunity.isDeletable()) {
      throw new AuraHandledException(
        'Você não tem permissão para excluir oportunidades.'
      );
    }

    try {
      Opportunity opp = new Opportunity(Id = recordId);
      delete opp;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  @AuraEnabled
  public static Id cloneRecord(Id recordId) {
    if (!Schema.sObjectType.Opportunity.isCreateable()) {
      throw new AuraHandledException(
        'Você não tem permissão para criar oportunidades.'
      );
    }

    try {
      Opportunity originalOpp = [
        SELECT Name, StageName, Amount, CloseDate, AccountId
        FROM Opportunity
        WHERE Id = :recordId
        WITH SECURITY_ENFORCED
        LIMIT 1
      ];

      Opportunity clonedOpp = new Opportunity(
        Name = originalOpp.Name + ' - Cópia',
        StageName = 'Sem contato',
        Amount = originalOpp.Amount,
        CloseDate = originalOpp.CloseDate,
        AccountId = originalOpp.AccountId
      );

      insert clonedOpp;
      return clonedOpp.Id;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }

  @AuraEnabled
  public static void deleteRecordsInBulk(List<Id> recordIds) {
    if (!Schema.sObjectType.Opportunity.isDeletable()) {
      throw new AuraHandledException(
        'Você não tem permissão para excluir oportunidades.'
      );
    }

    try {
      List<Opportunity> oppsToDelete = [
        SELECT Id
        FROM Opportunity
        WHERE Id IN :recordIds
        WITH SECURITY_ENFORCED
      ];
      delete oppsToDelete;
    } catch (Exception e) {
      throw new AuraHandledException(e.getMessage());
    }
  }
}

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.css
================
/* Estilos base */
.slds-box {
  transition: all 0.3s ease;
}

/* Estilos do cabeçalho */
.slds-card__header {
  padding: 0;
  border-bottom: 1px solid var(--lwc-colorBorder, #dddbda);
}

.slds-media__body {
  padding-right: 1rem;
}

/* Ajustes para o grid do cabeçalho */
.header-search {
  min-width: 240px;
  margin-bottom: 0;
}

.slds-media__figure lightning-icon {
  --sds-c-icon-color-background: #0176d3;
}

/* Alinhamento vertical dos elementos do cabeçalho */
.slds-card__header .slds-grid {
  min-height: 88px;
}

.slds-card__header .slds-col:last-child .slds-grid {
  height: 100%;
  align-items: center;
}

.kanban-column {
  min-height: 300px;
  height: calc(100vh - 200px);
  overflow-y: auto;
}

.records-container {
  position: relative;
  height: calc(100vh - 150px);
  overflow-y: auto;
  overflow-x: hidden;
  padding: 0.5rem;
  transition: background-color 0.3s ease;
}

/* Sistema de abas do Kanban */
.slds-tabs_default__nav {
  border-bottom: 0px solid var(--lwc-colorBorder, #dddbda);
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(8rem, 1fr));
  grid-gap: 1rem;

  align-items: center;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  margin-bottom: 1rem;
  overflow-x: auto;
}

.slds-tabs_default__item {
  position: relative;
  padding: 0;
  background: var(--lwc-colorBackgroundAlt, #f8f9fd);
  border-radius: var(--lwc-borderRadiusMedium, 0.25rem);
  margin-right: 0.5rem;
  color: var(--lwc-colorTextDefault, #16325c);
  font-weight: 500;
  border: 1px solid rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
  cursor: pointer;
  flex-shrink: 0;
}

.slds-tabs_default__item:last-child {
  margin-right: 0;
}

.slds-tabs_default__item .slds-tabs_default__link {
  width: 100%;
  height: 100%;
  padding: 0.2rem 1.5rem;
  display: flex;
  align-items: center;
  text-decoration: none;
  color: inherit;
}

.slds-tabs_default__item.slds-is-active {
  background-color: rgba(146, 111, 27, 0.15);
  color: var(--lwc-colorTextDefault, #16325c);
  border: 1px solid #926f1b;
  font-weight: 600;
}

.slds-tabs_default__item.slds-is-active .slds-badge.slds-badge_lightest {
  background-color: #ffffff;
  color: #926f1b;
}

.slds-tabs_default__item.slds-is-active lightning-icon {
  --sds-c-icon-color-foreground-default: var(--lwc-colorTextDefault, #16325c);
}

.slds-tabs_default__item:hover {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f7ff);
  border-color: #926f1b;
}

.slds-tabs_default__item:active {
  transform: translateY(0);
}

.slds-tabs_default__item.slds-is-active:hover {
  background-color: rgba(146, 111, 27, 0.15);
  transform: none;
}

.slds-tabs_default__item.drag-over {
  background-color: rgba(146, 111, 27, 0.1);
  border: 2px dashed #926f1b;
  box-shadow: var(--lwc-shadowDrag, 0 2px 4px 0 rgba(0, 0, 0, 0.1));
}

/* Remove todos os pseudo-elementos e setas */
.slds-tabs_default__item::after {
  display: none;
}

/* Badge de contagem */
.slds-badge.slds-badge_lightest {
  color: #926f1b;
  font-weight: var(--lwc-fontWeightBold, 600);
  margin-left: 0.5rem;
  font-size: 0.75rem;
}

/* Para o badge na aba ativa, mantemos a mesma cor amarela */
.slds-tabs_default__item.slds-is-active .slds-badge.slds-badge_lightest {
  background-color: #926f1b;
  color: #ffffff;
  border-color: transparent;
}

/* Estilos para os cards e containers */
.records-container.drag-over {
  background-color: rgba(146, 111, 27, 0.1);
  border: 2px dashed #926f1b;
}

.kanban-card {
  background: var(--lwc-colorBackground, #ffffff);
  border: 1px solid var(--lwc-colorBorder, #d8dde6);
  border-left: 4px solid #926f1b;
  box-shadow: var(--lwc-shadowDrag, 0 2px 3px 0 rgba(0, 0, 0, 0.05));
  cursor: move;
  position: relative;
  transition: all 0.3s ease;
}

.kanban-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--lwc-shadowDropDown, 0 2px 3px 0 rgba(0, 0, 0, 0.16));
}

.kanban-card.dragging {
  opacity: 0.7;
  transform: scale(0.98);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
}

/* Estilo do grid e colunas */
.slds-grid {
  display: flex;
  align-items: center;
  margin: 0;
  width: 100%;
  min-width: 0;
}

.slds-col {
  position: relative;
  padding: 0.25rem;
  min-width: 0;
  white-space: nowrap;
  text-overflow: ellipsis;
}

/* Tamanhos fixos das colunas */
.col-checkbox {
  width: 30px;
  min-width: 30px;
  max-width: 40px;
}

.col-type {
  width: 50px;
  min-width: 50px;
}

.col-name {
  width: 200px;
  min-width: 100px;
}

.col-account {
  width: 180px;
  min-width: 100px;
}

.col-amount {
  width: 120px;
  min-width: 100px;
}

.col-probability {
  width: 100px;
  min-width: 80px;
}

.col-date {
  width: 100px;
  min-width: 80px;
}

.col-stage {
  width: 140px;
  min-width: 120px;
}

.col-actions {
  width: 60px;
  min-width: 50px;
}

/* Cabeçalhos ordenáveis */
.sortable-header {
  cursor: pointer;
  user-select: none;
  position: relative;
  padding-right: 1.5rem;
}

.sortable-header:hover {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f3f3);
}

.sortable-header::after {
  content: "↕";
  position: absolute;
  right: 0.5rem;
  opacity: 0.5;
}

.sortable-header[data-sort="asc"]::after {
  content: "↑";
  opacity: 1;
}

.sortable-header[data-sort="desc"]::after {
  content: "↓";
  opacity: 1;
}

/* Estilização da barra de rolagem */
.records-container::-webkit-scrollbar {
  width: 5px;
}

.records-container::-webkit-scrollbar-track {
  background: var(--lwc-colorBackgroundAlt, #f1f1f1);
  border-radius: var(--lwc-borderRadiusSmall, 3px);
}

.records-container::-webkit-scrollbar-thumb {
  background: var(--lwc-colorBorder, #d8dde6);
  border-radius: var(--lwc-borderRadiusSmall, 3px);
}

.records-container::-webkit-scrollbar-thumb:hover {
  background: #b5bcc9;
}

/* Menu dropdown e ações */
.slds-dropdown-trigger {
  position: relative;
  margin-left: auto;
}

.slds-dropdown-trigger .slds-dropdown {
  display: none;
  position: absolute;
  right: 0;
  top: 100%;
  width: 200px;
  background: var(--lwc-colorBackground, white);
  box-shadow: var(--lwc-shadowDropDown, 0 2px 3px 0 rgba(0, 0, 0, 0.16));
  border: 1px solid var(--lwc-colorBorder, #dddbda);
  border-radius: var(--lwc-borderRadiusMedium, 0.25rem);
  z-index: 9000;
}

.slds-dropdown-trigger.slds-is-open .slds-dropdown {
  display: block !important;
}

.slds-dropdown__item > a {
  display: block;
  padding: 0.5rem 0.75rem;
  color: var(--lwc-colorTextDefault, #000000);
  white-space: nowrap;
  cursor: pointer;
}

.slds-dropdown__item > a:hover,
.slds-dropdown__item > a:focus {
  background-color: var(--lwc-colorBackgroundRowHover, #f3f2f2);
  text-decoration: none;
  outline: 0;
}

/* Combobox de estágio */
.stage-selector lightning-combobox {
  --sds-c-combobox-color-background: transparent;
  --sds-c-combobox-color-border: transparent;
}

.stage-selector .slds-combobox_container {
  min-width: 140px;
}

.stage-selector .slds-combobox__input {
  font-size: 0.75rem;
  text-transform: uppercase;
  padding: 0.25rem 0.75rem;
  background-color: #f3f3f3;
  border-radius: 0.25rem;
  border: 1px solid transparent;
  transition: all 0.2s ease;
  font-weight: 500;
  color: #444444;
}

.stage-selector .slds-combobox__input:hover {
  background-color: #e5e5e5;
  border-color: #dddbda;
}

.stage-selector .slds-combobox__input:focus {
  background-color: white;
  border-color: #0070d2;
  box-shadow: 0 0 3px #0070d2;
}

/* Cores por estágio específicas da instituição */
.stage-selector[data-stage="Sem contato"] .slds-combobox__input {
  background-color: #f3f3f3;
  color: #16325c;
}

.stage-selector[data-stage="Primeiro Contato"] .slds-combobox__input {
  background-color: #fdf0d4;
  color: #514f4d;
}

.stage-selector[data-stage="Primeira Reunião"] .slds-combobox__input {
  background-color: #d8e6fe;
  color: #1b5297;
}

.stage-selector[data-stage="Em Negociação"] .slds-combobox__input {
  background-color: #cce9ff;
  color: #1b5297;
}

.stage-selector[data-stage="Análise Contratual"] .slds-combobox__input {
  background-color: #45c65a;
  color: #ffffff;
}

.stage-selector[data-stage="Convertido"] .slds-combobox__input {
  background-color: #027e46;
  color: #ffffff;
}

.stage-selector[data-stage="Perdido"] .slds-combobox__input {
  background-color: #ffe3e3;
  color: #ba0517;
}

/* Animação de loading durante atualização do estágio */
.stage-selector.stage-updating {
  position: relative;
}

.stage-selector.stage-updating::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

/* Pesquisa e cabeçalho */
.header-search {
  min-width: 240px;
  padding-right: 1rem;
}

.search-box {
  margin-bottom: 0;
}

/* Ajustes para o ícone de oportunidade */
.slds-media__figure lightning-icon {
  --sds-c-icon-color-background: #0176d3;
}

.slds-card__header .slds-text-heading_medium {
  margin-bottom: 4px;
}

.records-container .slds-illustration_small {
  max-width: 500px;
  margin: 0 auto;
}

/* Responsividade */
@media screen and (max-width: 768px) {
  .kanban-column {
    height: auto;
    min-height: 200px;
    max-height: 400px;
  }

  .slds-tabs_default__item {
    padding: 0.5rem;
    font-size: 0.8rem;
  }

  .records-container {
    height: calc(100vh - 200px);
    max-height: 400px;
  }

  .slds-grid {
    flex-wrap: wrap;
  }

  .slds-col {
    flex: 1 1 50%;
  }

  .list-header {
    display: none;
  }
}

.probability-value {
  font-size: 0.75rem;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  background-color: #f3f3f3;
  text-align: center;
  font-weight: 500;
  width: fit-content;
  min-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0.5rem;
}

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.html
================
<!-- 
    Componente de Visualização de Registros - Oportunidade
    Este template implementa um sistema de visualização e gerenciamento de registros
-->
<template>
  <!-- Container principal com estilo de card do SLDS -->
  <div class="slds-card slds-card_boundary">
    <div class="slds-card__header">
      <!-- Título, ícone, descrição e ações na mesma linha -->
      <div class="slds-grid slds-grid_vertical-align-center slds-wrap">
        <!-- Coluna do título -->
        <div class="slds-col slds-size_1-of-2">
          <div class="slds-media slds-media_center slds-p-around_medium">
            <div class="slds-media__figure">
              <lightning-icon
                icon-name="standard:opportunity"
                size="medium"
                alternative-text="Visualização de Registros"
                title="Visualização de Registros"
              >
              </lightning-icon>
            </div>
            <div class="slds-media__body">
              <h1 class="slds-text-heading_medium">
                Visualização de Registros - Oportunidadea
              </h1>
              <p class="slds-text-body_small slds-line-height_reset">
                Gerencie seus registros de forma visual e eficiente
              </p>
            </div>
          </div>
        </div>

        <!-- Coluna das ações alinhada à direita -->
        <div class="slds-col slds-size_1-of-2">
          <div class="slds-grid slds-grid_align-end slds-p-horizontal_medium">
            <div class="slds-form-element header-search">
              <div class="slds-form-element__control">
                <lightning-input
                  type="search"
                  label="Pesquisar oportunidades"
                  onchange={handleSearch}
                  variant="label-hidden"
                  placeholder="Pesquisa nesta lista..."
                  class="search-box"
                >
                </lightning-input>
              </div>
            </div>

            <lightning-button
              variant="brand"
              label="Nova Oportunidade"
              title="Criar nova oportunidade"
              onclick={handleCreateNew}
              class="slds-m-right_small"
            >
            </lightning-button>

            <template if:true={showBulkActions}>
              <div class="slds-button-group slds-m-left_small">
                <lightning-button
                  variant="destructive"
                  label="Excluir Selecionados"
                  title="Excluir Registros"
                  onclick={handleBulkDelete}
                >
                </lightning-button>
              </div>
            </template>

            <lightning-button-icon
              icon-name="utility:refresh"
              variant="border-filled"
              alternative-text="Atualizar"
              title="Atualizar"
              class="slds-m-left_small"
              onclick={handleRefresh}
            >
            </lightning-button-icon>
          </div>
        </div>
      </div>
    </div>

    <div class="slds-card__body">
      <!-- Sistema de abas do SLDS -->
      <div class="slds-tabs_default">
        <!-- Navegação entre abas com suporte a drop -->
        <ul class="slds-tabs_default__nav" role="tablist">
          <template for:each={columns} for:item="column" for:index="index">
            <li
              key={column.label}
              class={column.tabClass}
              role="presentation"
              ondrop={handleDrop}
              ondragover={allowDrop}
              data-status={column.value}
            >
              <a
                class="slds-tabs_default__link"
                role="tab"
                tabindex={column.tabIndex}
                aria-selected={column.isActive}
                aria-controls={column.tabPanelId}
                data-index={index}
                onclick={handleTabClick}
              >
                <div class="slds-media slds-media_center">
                  <div class="slds-media__figure">
                    <lightning-icon
                      icon-name={column.iconName}
                      size="x-small"
                    ></lightning-icon>
                  </div>
                  <div class="slds-media__body">
                    <span>{column.label}</span>
                    <span
                      class="slds-badge slds-badge_lightest slds-m-left_small"
                      >{column.recordCount}</span
                    >
                  </div>
                </div>
              </a>
            </li>
          </template>
        </ul>

        <!-- Conteúdo de cada aba -->
        <template for:each={columns} for:item="column" for:index="index">
          <div
            key={column.label}
            id={column.tabPanelId}
            class={column.tabPanelClass}
            role="tabpanel"
            aria-labelledby={column.tabId}
          >
            <!-- Container dos cartões com scroll vertical -->
            <div
              class="slds-p-around_x-small records-container"
              ondrop={handleDrop}
              ondragover={allowDrop}
              data-status={column.value}
            >
              <!-- Cabeçalhos das colunas -->
              <div
                class="slds-grid slds-grid_vertical-align-center slds-border_bottom slds-p-bottom_x-small list-header"
              >
                <!-- Checkbox (vazio para manter alinhamento) -->
                <div class="slds-col col-checkbox"></div>
                <!-- Tipo -->
                <div class="slds-col col-type">
                  <div class="slds-text-title_caps slds-text-color_weak">
                    Tipo
                  </div>
                </div>
                <!-- Nome da Oportunidade -->
                <div class="slds-col col-name">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Name"
                  >
                    Nome da Oportunidade
                  </div>
                </div>
                <!-- Nome da Conta -->
                <div class="slds-col col-account">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="AccountName"
                  >
                    Nome da Conta
                  </div>
                </div>
                <!-- Valor -->
                <div class="slds-col col-amount">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Amount"
                  >
                    Valor
                  </div>
                </div>
                <!-- Probabilidade -->
                <div class="slds-col col-probability">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="Probability"
                  >
                    Probabilidade
                  </div>
                </div>
                <!-- Data de Fechamento -->
                <div class="slds-col col-date">
                  <div
                    class="slds-text-title_caps slds-text-color_weak sortable-header"
                    onclick={handleSort}
                    data-field="CloseDate"
                  >
                    Data de Fechamento
                  </div>
                </div>
                <!-- Estágio -->
                <div class="slds-col col-stage">
                  <div class="slds-text-title_caps slds-text-color_weak">
                    Estágio
                  </div>
                </div>
                <!-- Ações -->
                <div class="slds-col col-actions">
                  <div class="slds-text-title_caps slds-text-color_weak">
                    Ações
                  </div>
                </div>
              </div>

              <!-- Lista de registros -->
              <ul
                class="slds-has-dividers_around-space slds-has-list-interactions slds-m-top_x-small"
              >
                <template for:each={column.records} for:item="record">
                  <li
                    key={record.Id}
                    class="slds-item record-item"
                    draggable="true"
                    ondragstart={handleDrag}
                    ondragend={handleDragEnd}
                    data-id={record.Id}
                  >
                    <div class="slds-grid slds-grid_vertical-align-center">
                      <!-- Checkbox -->
                      <div class="slds-col col-checkbox">
                        <lightning-input
                          type="checkbox"
                          data-id={record.Id}
                          checked={record.selected}
                          onchange={handleRecordSelection}
                          variant="label-hidden"
                        >
                        </lightning-input>
                      </div>
                      <!-- Tipo -->
                      <div class="slds-col col-type">
                        <lightning-icon
                          icon-name={record.iconName}
                          size="x-small"
                          class="slds-m-right_x-small"
                        >
                        </lightning-icon>
                      </div>
                      <!-- Nome da Oportunidade -->
                      <div class="slds-col col-name">
                        <div class="slds-truncate" title={record.Name}>
                          <a
                            href="javascript:void(0);"
                            onclick={handleNavigateToRecord}
                            data-id={record.Id}
                            class="slds-text-link_reset"
                            style="text-decoration: underline"
                          >
                            {record.Name}
                          </a>
                        </div>
                      </div>
                      <!-- Nome da Conta -->
                      <div class="slds-col col-account">
                        <div class="slds-truncate" title={record.AccountName}>
                          {record.AccountName}
                        </div>
                      </div>
                      <!-- Valor -->
                      <div class="slds-col col-amount">
                        <div class="slds-truncate" title={record.Amount}>
                          <lightning-formatted-number
                            value={record.Amount}
                            format-style="currency"
                            currency-code="BRL"
                          >
                          </lightning-formatted-number>
                        </div>
                      </div>
                      <!-- Probabilidade -->
                      <div class="slds-col col-probability">
                        <div class="slds-truncate probability-value">
                          {record.Probabilidade_da_Oportunidade__c}
                        </div>
                      </div>
                      <!-- Data -->
                      <div class="slds-col col-date">
                        <div class="slds-truncate">
                          <template if:true={record.CloseDate}>
                            <lightning-formatted-date-time
                              value={record.CloseDate}
                              year="2-digit"
                              month="2-digit"
                              day="2-digit"
                            >
                            </lightning-formatted-date-time>
                          </template>
                        </div>
                      </div>
                      <!-- Estágio -->
                      <div class="slds-col col-stage">
                        <div
                          class="stage-selector"
                          data-stage={record.StageName}
                        >
                          <lightning-combobox
                            name="stage"
                            variant="label-hidden"
                            value={record.StageName}
                            options={stageOptions}
                            data-id={record.Id}
                            onchange={handleStageChange}
                            dropdown-class="stage-dropdown"
                          >
                          </lightning-combobox>
                        </div>
                      </div>
                      <!-- Ações -->
                      <div class="slds-col col-actions slds-text-align_right">
                        <div
                          class="slds-dropdown-trigger slds-dropdown-trigger_click"
                        >
                          <button
                            class="slds-button slds-button_icon slds-button_icon-border-filled"
                            onclick={handleActionClick}
                            data-id={record.Id}
                            aria-haspopup="true"
                          >
                            <lightning-icon
                              icon-name="utility:chevrondown"
                              size="small"
                              alternative-text="Mostrar menu"
                            >
                            </lightning-icon>
                          </button>
                          <div
                            class="slds-dropdown slds-dropdown_right"
                            role="menu"
                          >
                            <ul class="slds-dropdown__list" role="menu">
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleEdit}
                                  data-id={record.Id}
                                >
                                  <span class="slds-truncate">Editar</span>
                                </a>
                              </li>
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleClone}
                                  data-id={record.Id}
                                >
                                  <span class="slds-truncate">Duplicar</span>
                                </a>
                              </li>
                              <li
                                class="slds-dropdown__item"
                                role="presentation"
                              >
                                <a
                                  href="javascript:void(0);"
                                  role="menuitem"
                                  tabindex="-1"
                                  onclick={handleDelete}
                                  data-id={record.Id}
                                >
                                  <span class="slds-truncate" title="Excluir"
                                    >Excluir</span
                                  >
                                </a>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                </template>
              </ul>

              <!-- Mensagem quando não há registros -->
              <template if:true={column.isEmpty}>
                <div
                  class="slds-illustration slds-illustration_small slds-p-around_medium"
                >
                  <div class="slds-text-align_center slds-m-vertical_medium">
                    <h3 class="slds-text-heading_medium">
                      Nenhuma oportunidade nesta categoria
                    </h3>
                    <p class="slds-text-body_regular slds-m-vertical_small">
                      Comece adicionando uma nova oportunidade nesta fase do
                      pipeline
                    </p>
                    <lightning-button
                      variant="brand"
                      label="Nova Oportunidade"
                      title="Criar nova oportunidade"
                      onclick={handleCreateNew}
                      class="slds-m-top_small"
                    >
                    </lightning-button>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>
    </div>
  </div>
</template>

================
File: force-app/main/default/lwc/kanbanPerson/kanbanPerson.js
================
/**
 * @description Componente de Visualização de Registros - Oportunidade para gerenciamento
 * de registros com navegação por abas no estilo Pipeline do Salesforce
 */
import { LightningElement, wire, track, api } from "lwc";
import { refreshApex } from "@salesforce/apex";
import { NavigationMixin } from "lightning/navigation";
import getRecords from "@salesforce/apex/KanbanDataController.getRecords";
import updateRecordStatus from "@salesforce/apex/KanbanDataController.updateRecordStatus";
import deleteRecord from "@salesforce/apex/KanbanDataController.deleteRecord";
import cloneRecord from "@salesforce/apex/KanbanDataController.cloneRecord";
import deleteRecordsInBulk from "@salesforce/apex/KanbanDataController.deleteRecordsInBulk";

export default class KanbanPerson extends NavigationMixin(LightningElement) {
  @api statusField = "StageName";
  @api titleField = "Name";
  @api subtitleField = "Account.Name";
  @api valueField = "Amount";
  @api dateField = "CloseDate";
  @api recordLimit = 1000;

  @track columns = [];
  @track error;
  @track searchTerm = "";
  @track sortBy = "Name";
  @track sortDirection = "asc";
  @track selectedRecords = new Set();
  @track showBulkActions = false;
  @track showDeleteModal = false;

  recordIdToDelete;
  wiredRecordsResult;
  originalRecordsData;
  draggedRecordId;
  activeTabIndex = 0;
  activeActionButton = null;

  get hasSelectedRecords() {
    return this.selectedRecords.size > 0;
  }

  // Mapeamento de status para ícones com os estágios corretos de Oportunidade
  statusIconMap = {
    "Sem contato": "utility:multi_picklist", // Prospecção inicial
    "Primeiro Contato": "utility:filter", // Qualificação inicial
    "Primeira Reunião": "utility:file", // Proposta/Apresentação
    "Em Negociação": "utility:adjust_value", // Negociação/Revisão
    "Análise Contratual": "utility:contract", // Contrato/Negociação final
    Convertido: "utility:success", // Fechado/Ganho
    Perdido: "utility:error" // Fechado/Perdido
  };

  /**
   * @description Wire adapter para buscar registros do Apex
   */
  @wire(getRecords)
  wiredRecords(result) {
    this.wiredRecordsResult = result;
    if (result.data) {
      this.error = undefined;
      this.originalRecordsData = result.data;
      this.processData();
    } else if (result.error) {
      this.error = result.error;
    }
  }

  // Novo método para processar os dados com todas as transformações necessárias
  processData() {
    if (!this.originalRecordsData) return;

    // 1. Aplicar filtro de pesquisa
    let processedData = this.filterRecords(this.originalRecordsData);

    // 2. Aplicar ordenação
    processedData = this.sortRecords(processedData);

    // 3. Formatar dados para o kanban
    this.formatData(processedData);
  }

  filterRecords(records) {
    if (!this.searchTerm) return records;

    const searchTermLower = this.searchTerm.toLowerCase();
    return records.filter(
      (record) =>
        record.Name?.toLowerCase().includes(searchTermLower) ||
        record.Account?.Name?.toLowerCase().includes(searchTermLower) ||
        record.StageName?.toLowerCase().includes(searchTermLower)
    );
  }

  handleSearch(event) {
    this.searchTerm = event.target.value;
    this.processData();
  }

  /**
   * @description Formata os dados para exibição no Pipeline
   * Adiciona propriedades para controle da UI de abas
   */
  formatData(records) {
    const statuses = [
      "Sem contato",
      "Primeiro Contato",
      "Primeira Reunião",
      "Em Negociação",
      "Análise Contratual",
      "Convertido",
      "Perdido"
    ];

    this.columns = statuses.map((status, index) => {
      let statusRecords = records.filter(
        (record) => record[this.statusField] === status
      );

      const recordsWithIcons = statusRecords.map((record) => ({
        ...record,
        iconName:
          this.statusIconMap[record[this.statusField]] || "utility:record",
        Name: this.getFieldValue(record, this.titleField) || "N/A",
        Amount: this.getFieldValue(record, this.valueField) || 0,
        Probabilidade_da_Oportunidade__c:
          record.Probabilidade_da_Oportunidade__c
            ? record.Probabilidade_da_Oportunidade__c
            : "Não definido",
        CloseDate: this.getFieldValue(record, this.dateField) || null,
        AccountName: this.getFieldValue(record, this.subtitleField) || "N/A"
      }));

      // Propriedades para o sistema de abas
      const isActive = index === this.activeTabIndex;
      const tabId = `tab-${status.toLowerCase().replace(/ /g, "-")}`;
      const tabPanelId = `tabPanel-${status.toLowerCase().replace(/ /g, "-")}`;

      return {
        label: status,
        value: status,
        records: recordsWithIcons,
        recordCount: statusRecords.length,
        isEmpty: statusRecords.length === 0,
        iconName: this.statusIconMap[status],
        tabClass: `slds-tabs_default__item ${isActive ? "slds-is-active" : ""}`,
        tabPanelClass: `slds-tabs_default__content ${isActive ? "slds-show" : "slds-hide"}`,
        tabIndex: isActive ? 0 : -1,
        isActive: isActive,
        tabId: tabId,
        tabPanelId: tabPanelId
      };
    });
  }

  /**
   * @description Handler para clique em aba
   * Atualiza a aba ativa e reformata os dados
   */
  handleTabClick(event) {
    // Evitar comportamento padrão
    event.preventDefault();

    // Obter índice da aba clicada
    const clickedTabIndex = parseInt(event.currentTarget.dataset.index, 10);

    // Atualizar aba ativa
    this.activeTabIndex = clickedTabIndex;

    // Reformatar dados com nova aba ativa
    if (this.wiredRecordsResult.data) {
      this.formatData(this.wiredRecordsResult.data);
    }
  }

  /**
   * @description Handler para início do drag de um card
   */
  handleDrag(event) {
    this.draggedRecordId = event.target.dataset.id;
    const item = event.currentTarget;

    // Adicionar classe para estilo durante drag
    item.classList.add("dragging");

    // Configurar o efeito de arrastar
    event.dataTransfer.effectAllowed = "move";

    // Adicionar dica visual
    const dropTargets = this.template.querySelectorAll(".records-container");
    dropTargets.forEach((target) => {
      if (!target.classList.contains("drag-over")) {
        target.classList.add("potential-drop");
      }
    });
  }

  /**
   * @description Handler para permitir o drop
   */
  allowDrop(event) {
    event.preventDefault();

    // Adicionar feedback visual durante o drag
    const dropTarget = event.currentTarget;

    // Remover classe drag-over de todos os elementos
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    // Adicionar classe drag-over ao elemento atual
    dropTarget.classList.add("drag-over");
  }

  /**
   * @description Handler para quando um card é solto em uma coluna
   */
  handleDrop(event) {
    event.preventDefault();
    const newStatus = event.currentTarget.dataset.status;

    // Remover todas as classes de feedback visual
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    this.template
      .querySelectorAll(".kanban-card")
      .forEach((card) => card.classList.remove("dragging"));

    if (this.draggedRecordId && newStatus) {
      // Encontrar o registro atual para comparar o estágio
      const currentRecord = this.findRecordById(this.draggedRecordId);
      if (currentRecord && currentRecord.StageName === newStatus) {
        // Se o estágio é o mesmo, apenas atualiza a UI sem mostrar mensagem
        return;
      }

      // Encontrar o índice da nova aba e ativá-la
      const newTabIndex = this.columns.findIndex(
        (col) => col.value === newStatus
      );
      if (newTabIndex !== -1) {
        this.activeTabIndex = newTabIndex;
        // Atualizar classes das abas
        this.columns = this.columns.map((column, index) => ({
          ...column,
          tabClass: `slds-tabs_default__item ${index === this.activeTabIndex ? "slds-is-active" : ""}`,
          isActive: index === this.activeTabIndex,
          tabIndex: index === this.activeTabIndex ? "0" : "-1"
        }));
      }

      // Se chegou aqui, o estágio é diferente, então atualiza
      updateRecordStatus({
        recordId: this.draggedRecordId,
        newStatus: newStatus
      })
        .then(() => {
          return refreshApex(this.wiredRecordsResult);
        })
        .catch((error) => {
          console.error("Erro ao atualizar status:", error);
        });
    }
  }

  // Adicionar evento para remover feedback visual quando o drag termina
  handleDragEnd(event) {
    event.preventDefault();
    this.template
      .querySelectorAll(".slds-tabs_default__item, .records-container")
      .forEach((el) => el.classList.remove("drag-over"));

    event.target.classList.remove("dragging");
  }

  handleActionClick(event) {
    event.preventDefault();
    event.stopPropagation();

    // Fecha o menu anterior se existir
    if (
      this.activeActionButton &&
      this.activeActionButton !== event.currentTarget
    ) {
      this.activeActionButton.parentElement.classList.remove("slds-is-open");
    }

    // Toggle do menu atual
    const dropdownTrigger = event.currentTarget.parentElement;
    dropdownTrigger.classList.toggle("slds-is-open");

    // Atualiza o botão ativo
    this.activeActionButton = event.currentTarget;
  }

  // Fecha o dropdown quando clicar fora
  handleClickOutside = (event) => {
    if (
      this.activeActionButton &&
      !this.activeActionButton.contains(event.target)
    ) {
      this.activeActionButton.parentElement.classList.remove("slds-is-open");
      this.activeActionButton = null;
    }
  };

  connectedCallback() {
    // Adiciona listener para fechar o dropdown quando clicar fora
    document.addEventListener("click", this.handleClickOutside);
  }

  disconnectedCallback() {
    // Remove o listener quando o componente for destruído
    document.removeEventListener("click", this.handleClickOutside);
  }

  handleEdit(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;

    // Navega para a página de edição da oportunidade
    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: recordId,
        objectApiName: "Opportunity",
        actionName: "edit"
      }
    });
  }

  handleDelete(event) {
    event.preventDefault();
    event.stopPropagation();
    const recordId = event.currentTarget.dataset.id;

    deleteRecord({ recordId })
      .then(() => {
        return refreshApex(this.wiredRecordsResult);
      })
      .catch((error) => {
        console.error("Erro ao excluir registro:", error);
      });
  }

  handleClone(event) {
    event.preventDefault();
    event.stopPropagation();

    const recordId = event.currentTarget.dataset.id;

    cloneRecord({ recordId })
      .then(() => {
        return refreshApex(this.wiredRecordsResult);
      })
      .catch((error) => {
        console.error("Erro ao clonar registro:", error);
      });
  }

  handleRefresh() {
    return refreshApex(this.wiredRecordsResult);
  }

  handleNavigateToRecord(event) {
    event.preventDefault();
    event.stopPropagation();

    this[NavigationMixin.Navigate]({
      type: "standard__recordPage",
      attributes: {
        recordId: event.currentTarget.dataset.id,
        objectApiName: "Opportunity",
        actionName: "view"
      }
    });
  }

  handleRecordSelection(event) {
    const recordId = event.target.dataset.id;
    if (event.target.checked) {
      this.selectedRecords.add(recordId);
    } else {
      this.selectedRecords.delete(recordId);
    }
    this.showBulkActions = this.selectedRecords.size > 0;
  }

  handleBulkDelete() {
    deleteRecordsInBulk({
      recordIds: Array.from(this.selectedRecords)
    })
      .then(() => {
        this.selectedRecords.clear();
        this.showBulkActions = false;
        return refreshApex(this.wiredRecordsResult);
      })
      .catch((error) => {
        console.error("Erro ao excluir registros em massa:", error);
      });
  }

  get stageOptions() {
    return [
      { label: "Sem contato", value: "Sem contato" },
      { label: "Primeiro Contato", value: "Primeiro Contato" },
      { label: "Primeira Reunião", value: "Primeira Reunião" },
      { label: "Em Negociação", value: "Em Negociação" },
      { label: "Análise Contratual", value: "Análise Contratual" },
      { label: "Convertido", value: "Convertido" },
      { label: "Perdido", value: "Perdido" }
    ];
  }

  async handleStageChange(event) {
    const recordId = event.target.dataset.id;
    const newStatus = event.detail.value;

    try {
      await updateRecordStatus({ recordId, newStatus });

      // Encontrar o índice da nova aba e atualizar
      const newTabIndex = this.columns.findIndex(
        (column) => column.value === newStatus
      );
      if (newTabIndex !== -1) {
        this.activeTabIndex = newTabIndex;
        // Atualizar classes das abas
        this.columns = this.columns.map((column, index) => ({
          ...column,
          tabClass: `slds-tabs_default__item ${index === this.activeTabIndex ? "slds-is-active" : ""}`,
          tabPanelClass: `slds-tabs_default__content ${index === this.activeTabIndex ? "slds-show" : "slds-hide"}`,
          isActive: index === this.activeTabIndex,
          tabIndex: index === this.activeTabIndex ? 0 : -1
        }));
      }

      await refreshApex(this.wiredRecordsResult);
    } catch (error) {
      console.error("Erro ao atualizar status:", error);
    }
  }

  // Método auxiliar para encontrar um registro pelo Id
  findRecordById(recordId) {
    for (const column of this.columns) {
      const record = column.records.find((rec) => rec.Id === recordId);
      if (record) {
        return record;
      }
    }
    return null;
  }

  handleSort(event) {
    const field = event.currentTarget.dataset.field;
    const currentSortDir = this.sortDirection;

    // Toggle sort direction
    this.sortDirection =
      field === this.sortBy && currentSortDir === "asc" ? "desc" : "asc";
    this.sortBy = field;

    // Atualizar ícone de ordenação
    this.template.querySelectorAll(".sortable-header").forEach((header) => {
      header.setAttribute(
        "data-sort",
        header.dataset.field === field ? this.sortDirection : ""
      );
    });

    this.processData();
  }

  sortRecords(records) {
    const isReverse = this.sortDirection === "desc";
    const field = this.sortBy;

    return [...records].sort((a, b) => {
      let valueA = this.getFieldValue(a, field);
      let valueB = this.getFieldValue(b, field);

      // Tratamento especial para o campo de probabilidade
      if (field === "Probabilidade_da_Oportunidade__c") {
        const probabilityOrder = {
          "100%": 6,
          "89%": 5,
          "55%": 4,
          "34%": 3,
          "13%": 2,
          "0%": 1
        };
        valueA = probabilityOrder[valueA] || 0;
        valueB = probabilityOrder[valueB] || 0;
      }

      // Tratamento para valores nulos/undefined
      if (valueA === null || valueA === undefined) return isReverse ? -1 : 1;
      if (valueB === null || valueB === undefined) return isReverse ? 1 : -1;

      // Converter para string minúscula para comparação de texto
      if (typeof valueA === "string" && typeof valueB === "string") {
        valueA = valueA.toLowerCase();
        valueB = valueB.toLowerCase();
      }

      // Comparação final
      return isReverse ? (valueA < valueB ? 1 : -1) : valueA < valueB ? -1 : 1;
    });
  }

  getFieldValue(record, field) {
    // Tratar campos aninhados (ex: Account.Name)
    if (field === "AccountName") {
      return record.Account?.Name;
    }
    // Tratar o campo Name diretamente
    if (field === "Name") {
      return record.Name || "";
    }
    return record[field];
  }

  handleCreateNew() {
    this[NavigationMixin.Navigate]({
      type: "standard__objectPage",
      attributes: {
        objectApiName: "Opportunity",
        actionName: "new"
      }
    });
  }

  handleProbabilityChange(event) {
    const recordId = event.target.dataset.recordId;
    const probability = event.detail.value;
    this.updateProbability(recordId, probability);
  }
}



================================================================
End of Codebase
================================================================
